// Package views_order provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package views_order

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code Код ошибки
	Code string `json:"code"`

	// Message Описание ошибки
	Message string `json:"message"`
}

// MobileV1OrderCreateRequest defines model for MobileV1OrderCreateRequest.
type MobileV1OrderCreateRequest struct {
	// CustomerUUID Логин пользователя в Telegram
	CustomerUUID openapi_types.UUID `json:"customer_uuid"`

	// RoomCode Код комнаты для группового заказа
	RoomCode *string `json:"room_code,omitempty"`

	// TableID Уникальный идентификатор стола
	TableID string `json:"table_id"`
}

// MobileV1OrderCreateResponse defines model for MobileV1OrderCreateResponse.
type MobileV1OrderCreateResponse struct {
	// OrderUUID Уникальный идентификатор созданного заказа
	OrderUUID openapi_types.UUID `json:"order_uuid"`
}

// MobileV1OrderCustomerSignInRequest defines model for MobileV1OrderCustomerSignInRequest.
type MobileV1OrderCustomerSignInRequest struct {
	ChatID  string `json:"chat_id"`
	TgID    string `json:"tg_id"`
	TgLogin string `json:"tg_login"`
}

// MobileV1OrderCustomerSignInResponse defines model for MobileV1OrderCustomerSignInResponse.
type MobileV1OrderCustomerSignInResponse struct {
	CustomerUUID openapi_types.UUID `json:"customer_uuid"`
}

// MobileV1OrderCustomerSignUpRequest defines model for MobileV1OrderCustomerSignUpRequest.
type MobileV1OrderCustomerSignUpRequest struct {
	Avatar  openapi_types.File `json:"avatar"`
	ChatID  string             `json:"chat_id"`
	TgID    string             `json:"tg_id"`
	TgLogin string             `json:"tg_login"`
}

// MobileV1OrderCustomerSignUpResponse defines model for MobileV1OrderCustomerSignUpResponse.
type MobileV1OrderCustomerSignUpResponse struct {
	CustomerUUID openapi_types.UUID `json:"customer_uuid"`
}

// PostMobileV1OrderCreateJSONRequestBody defines body for PostMobileV1OrderCreate for application/json ContentType.
type PostMobileV1OrderCreateJSONRequestBody = MobileV1OrderCreateRequest

// PostMobileV1OrderCustomerSignInJSONRequestBody defines body for PostMobileV1OrderCustomerSignIn for application/json ContentType.
type PostMobileV1OrderCustomerSignInJSONRequestBody = MobileV1OrderCustomerSignInRequest

// PostMobileV1OrderCustomerSignUpMultipartRequestBody defines body for PostMobileV1OrderCustomerSignUp for multipart/form-data ContentType.
type PostMobileV1OrderCustomerSignUpMultipartRequestBody = MobileV1OrderCustomerSignUpRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostMobileV1OrderCreateWithBody request with any body
	PostMobileV1OrderCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMobileV1OrderCreate(ctx context.Context, body PostMobileV1OrderCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMobileV1OrderCustomerSignInWithBody request with any body
	PostMobileV1OrderCustomerSignInWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMobileV1OrderCustomerSignIn(ctx context.Context, body PostMobileV1OrderCustomerSignInJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMobileV1OrderCustomerSignUpWithBody request with any body
	PostMobileV1OrderCustomerSignUpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostMobileV1OrderCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMobileV1OrderCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMobileV1OrderCreate(ctx context.Context, body PostMobileV1OrderCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMobileV1OrderCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMobileV1OrderCustomerSignInWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMobileV1OrderCustomerSignInRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMobileV1OrderCustomerSignIn(ctx context.Context, body PostMobileV1OrderCustomerSignInJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMobileV1OrderCustomerSignInRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMobileV1OrderCustomerSignUpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMobileV1OrderCustomerSignUpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostMobileV1OrderCreateRequest calls the generic PostMobileV1OrderCreate builder with application/json body
func NewPostMobileV1OrderCreateRequest(server string, body PostMobileV1OrderCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMobileV1OrderCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMobileV1OrderCreateRequestWithBody generates requests for PostMobileV1OrderCreate with any type of body
func NewPostMobileV1OrderCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mobile/v1/order/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostMobileV1OrderCustomerSignInRequest calls the generic PostMobileV1OrderCustomerSignIn builder with application/json body
func NewPostMobileV1OrderCustomerSignInRequest(server string, body PostMobileV1OrderCustomerSignInJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMobileV1OrderCustomerSignInRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMobileV1OrderCustomerSignInRequestWithBody generates requests for PostMobileV1OrderCustomerSignIn with any type of body
func NewPostMobileV1OrderCustomerSignInRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mobile/v1/order/customer/sign-in")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostMobileV1OrderCustomerSignUpRequestWithBody generates requests for PostMobileV1OrderCustomerSignUp with any type of body
func NewPostMobileV1OrderCustomerSignUpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mobile/v1/order/customer/sign-up")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostMobileV1OrderCreateWithBodyWithResponse request with any body
	PostMobileV1OrderCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMobileV1OrderCreateResponse, error)

	PostMobileV1OrderCreateWithResponse(ctx context.Context, body PostMobileV1OrderCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMobileV1OrderCreateResponse, error)

	// PostMobileV1OrderCustomerSignInWithBodyWithResponse request with any body
	PostMobileV1OrderCustomerSignInWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMobileV1OrderCustomerSignInResponse, error)

	PostMobileV1OrderCustomerSignInWithResponse(ctx context.Context, body PostMobileV1OrderCustomerSignInJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMobileV1OrderCustomerSignInResponse, error)

	// PostMobileV1OrderCustomerSignUpWithBodyWithResponse request with any body
	PostMobileV1OrderCustomerSignUpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMobileV1OrderCustomerSignUpResponse, error)
}

type PostMobileV1OrderCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MobileV1OrderCreateResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostMobileV1OrderCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMobileV1OrderCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMobileV1OrderCustomerSignInResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MobileV1OrderCustomerSignInResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostMobileV1OrderCustomerSignInResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMobileV1OrderCustomerSignInResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMobileV1OrderCustomerSignUpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MobileV1OrderCustomerSignUpResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostMobileV1OrderCustomerSignUpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMobileV1OrderCustomerSignUpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostMobileV1OrderCreateWithBodyWithResponse request with arbitrary body returning *PostMobileV1OrderCreateResponse
func (c *ClientWithResponses) PostMobileV1OrderCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMobileV1OrderCreateResponse, error) {
	rsp, err := c.PostMobileV1OrderCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMobileV1OrderCreateResponse(rsp)
}

func (c *ClientWithResponses) PostMobileV1OrderCreateWithResponse(ctx context.Context, body PostMobileV1OrderCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMobileV1OrderCreateResponse, error) {
	rsp, err := c.PostMobileV1OrderCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMobileV1OrderCreateResponse(rsp)
}

// PostMobileV1OrderCustomerSignInWithBodyWithResponse request with arbitrary body returning *PostMobileV1OrderCustomerSignInResponse
func (c *ClientWithResponses) PostMobileV1OrderCustomerSignInWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMobileV1OrderCustomerSignInResponse, error) {
	rsp, err := c.PostMobileV1OrderCustomerSignInWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMobileV1OrderCustomerSignInResponse(rsp)
}

func (c *ClientWithResponses) PostMobileV1OrderCustomerSignInWithResponse(ctx context.Context, body PostMobileV1OrderCustomerSignInJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMobileV1OrderCustomerSignInResponse, error) {
	rsp, err := c.PostMobileV1OrderCustomerSignIn(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMobileV1OrderCustomerSignInResponse(rsp)
}

// PostMobileV1OrderCustomerSignUpWithBodyWithResponse request with arbitrary body returning *PostMobileV1OrderCustomerSignUpResponse
func (c *ClientWithResponses) PostMobileV1OrderCustomerSignUpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMobileV1OrderCustomerSignUpResponse, error) {
	rsp, err := c.PostMobileV1OrderCustomerSignUpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMobileV1OrderCustomerSignUpResponse(rsp)
}

// ParsePostMobileV1OrderCreateResponse parses an HTTP response from a PostMobileV1OrderCreateWithResponse call
func ParsePostMobileV1OrderCreateResponse(rsp *http.Response) (*PostMobileV1OrderCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMobileV1OrderCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MobileV1OrderCreateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostMobileV1OrderCustomerSignInResponse parses an HTTP response from a PostMobileV1OrderCustomerSignInWithResponse call
func ParsePostMobileV1OrderCustomerSignInResponse(rsp *http.Response) (*PostMobileV1OrderCustomerSignInResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMobileV1OrderCustomerSignInResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MobileV1OrderCustomerSignInResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostMobileV1OrderCustomerSignUpResponse parses an HTTP response from a PostMobileV1OrderCustomerSignUpWithResponse call
func ParsePostMobileV1OrderCustomerSignUpResponse(rsp *http.Response) (*PostMobileV1OrderCustomerSignUpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMobileV1OrderCustomerSignUpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MobileV1OrderCustomerSignUpResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Инициализация сессии
	// (POST /mobile/v1/order/create)
	PostMobileV1OrderCreate(c *gin.Context)
	// Вход пользователя в приложение
	// (POST /mobile/v1/order/customer/sign-in)
	PostMobileV1OrderCustomerSignIn(c *gin.Context)
	// Регистрация пользователя в приложении
	// (POST /mobile/v1/order/customer/sign-up)
	PostMobileV1OrderCustomerSignUp(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostMobileV1OrderCreate operation middleware
func (siw *ServerInterfaceWrapper) PostMobileV1OrderCreate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostMobileV1OrderCreate(c)
}

// PostMobileV1OrderCustomerSignIn operation middleware
func (siw *ServerInterfaceWrapper) PostMobileV1OrderCustomerSignIn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostMobileV1OrderCustomerSignIn(c)
}

// PostMobileV1OrderCustomerSignUp operation middleware
func (siw *ServerInterfaceWrapper) PostMobileV1OrderCustomerSignUp(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostMobileV1OrderCustomerSignUp(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/mobile/v1/order/create", wrapper.PostMobileV1OrderCreate)
	router.POST(options.BaseURL+"/mobile/v1/order/customer/sign-in", wrapper.PostMobileV1OrderCustomerSignIn)
	router.POST(options.BaseURL+"/mobile/v1/order/customer/sign-up", wrapper.PostMobileV1OrderCustomerSignUp)
}

type PostMobileV1OrderCreateRequestObject struct {
	Body *PostMobileV1OrderCreateJSONRequestBody
}

type PostMobileV1OrderCreateResponseObject interface {
	VisitPostMobileV1OrderCreateResponse(w http.ResponseWriter) error
}

type PostMobileV1OrderCreate200JSONResponse MobileV1OrderCreateResponse

func (response PostMobileV1OrderCreate200JSONResponse) VisitPostMobileV1OrderCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostMobileV1OrderCreate403JSONResponse ErrorResponse

func (response PostMobileV1OrderCreate403JSONResponse) VisitPostMobileV1OrderCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostMobileV1OrderCustomerSignInRequestObject struct {
	Body *PostMobileV1OrderCustomerSignInJSONRequestBody
}

type PostMobileV1OrderCustomerSignInResponseObject interface {
	VisitPostMobileV1OrderCustomerSignInResponse(w http.ResponseWriter) error
}

type PostMobileV1OrderCustomerSignIn200JSONResponse MobileV1OrderCustomerSignInResponse

func (response PostMobileV1OrderCustomerSignIn200JSONResponse) VisitPostMobileV1OrderCustomerSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostMobileV1OrderCustomerSignIn403JSONResponse ErrorResponse

func (response PostMobileV1OrderCustomerSignIn403JSONResponse) VisitPostMobileV1OrderCustomerSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostMobileV1OrderCustomerSignIn404JSONResponse ErrorResponse

func (response PostMobileV1OrderCustomerSignIn404JSONResponse) VisitPostMobileV1OrderCustomerSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostMobileV1OrderCustomerSignUpRequestObject struct {
	Body *multipart.Reader
}

type PostMobileV1OrderCustomerSignUpResponseObject interface {
	VisitPostMobileV1OrderCustomerSignUpResponse(w http.ResponseWriter) error
}

type PostMobileV1OrderCustomerSignUp200JSONResponse MobileV1OrderCustomerSignUpResponse

func (response PostMobileV1OrderCustomerSignUp200JSONResponse) VisitPostMobileV1OrderCustomerSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostMobileV1OrderCustomerSignUp409JSONResponse ErrorResponse

func (response PostMobileV1OrderCustomerSignUp409JSONResponse) VisitPostMobileV1OrderCustomerSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Инициализация сессии
	// (POST /mobile/v1/order/create)
	PostMobileV1OrderCreate(ctx context.Context, request PostMobileV1OrderCreateRequestObject) (PostMobileV1OrderCreateResponseObject, error)
	// Вход пользователя в приложение
	// (POST /mobile/v1/order/customer/sign-in)
	PostMobileV1OrderCustomerSignIn(ctx context.Context, request PostMobileV1OrderCustomerSignInRequestObject) (PostMobileV1OrderCustomerSignInResponseObject, error)
	// Регистрация пользователя в приложении
	// (POST /mobile/v1/order/customer/sign-up)
	PostMobileV1OrderCustomerSignUp(ctx context.Context, request PostMobileV1OrderCustomerSignUpRequestObject) (PostMobileV1OrderCustomerSignUpResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostMobileV1OrderCreate operation middleware
func (sh *strictHandler) PostMobileV1OrderCreate(ctx *gin.Context) {
	var request PostMobileV1OrderCreateRequestObject

	var body PostMobileV1OrderCreateJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostMobileV1OrderCreate(ctx, request.(PostMobileV1OrderCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostMobileV1OrderCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostMobileV1OrderCreateResponseObject); ok {
		if err := validResponse.VisitPostMobileV1OrderCreateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostMobileV1OrderCustomerSignIn operation middleware
func (sh *strictHandler) PostMobileV1OrderCustomerSignIn(ctx *gin.Context) {
	var request PostMobileV1OrderCustomerSignInRequestObject

	var body PostMobileV1OrderCustomerSignInJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostMobileV1OrderCustomerSignIn(ctx, request.(PostMobileV1OrderCustomerSignInRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostMobileV1OrderCustomerSignIn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostMobileV1OrderCustomerSignInResponseObject); ok {
		if err := validResponse.VisitPostMobileV1OrderCustomerSignInResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostMobileV1OrderCustomerSignUp operation middleware
func (sh *strictHandler) PostMobileV1OrderCustomerSignUp(ctx *gin.Context) {
	var request PostMobileV1OrderCustomerSignUpRequestObject

	if reader, err := ctx.Request.MultipartReader(); err == nil {
		request.Body = reader
	} else {
		ctx.Error(err)
		return
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostMobileV1OrderCustomerSignUp(ctx, request.(PostMobileV1OrderCustomerSignUpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostMobileV1OrderCustomerSignUp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostMobileV1OrderCustomerSignUpResponseObject); ok {
		if err := validResponse.VisitPostMobileV1OrderCustomerSignUpResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXzW7bRhB+FWLbIyPKdS7lLS168KGokZ9eisJYi2t5A5LL7C4NGIEAyW6LACnQn0uL",
	"FghS9AVURapZK6JfYfaNitmVZP3QsiW4dXISQe787DfffDN6ThoiyUTKUq1I+JyoxiFLqH38TEohHzKV",
	"iVQxfEGjiGsuUhrvSpExqTlTJDygsWI+yWZeodPImkRMNSTP0IqEBH6DEvoelOYFFPAXnENBfKKPM0ZC",
	"orTkaZO0fJIwpWizyv4VXEBhOtCFERQwuMZTyyeSPcu5ZBEJv3I5XXr/enpe7D9lDY2RPxf7PGZfbn0h",
	"IyY/lYxq9pA9y5nS694/V1okTO7lOY8qLvI7lPAGChh5cAElDM33cAYl9KBrTmAAQ/ODBz3vMYtZU9KE",
	"+ORAyIRqEhLrsAI0KUSytxr2cyjhLYwwhnnpQd+FeWPa5hQubB49m1bpwRl04Ry6+FsVTNP9mO1V3uxP",
	"Wxq0xUuNzEv4x4MC+jCAkTmBwnzjPpsTKE3bMx18gGFVnIX6TYP6C/DeuJIbUVmgh6vquPZtoYQz6FsC",
	"j6rBvqbSC6DMZHc9DGPUHvFmupNuSOxDqseFX2ZFc8WXWDR5WvFxschNV+GphT8Nufb9NlOuxc5drx7r",
	"MnMm5SfZZiWhR1RTOZfqPk+pPK7q3Dusnz/JdG1U3sVC4nmeHohlUXiwuzMRVxRW04Yu9GCIkgAFKu5M",
	"v8NbKGqYC9cxen+UUKkfo9B5DhHvwe4O8ckRk8p536rVa3VETGQspRknIdmu1WvbxCcZ1Yf26kFibYOj",
	"rcDqQ9CwAoifMuH4taBjf0x0yfxkTjwrTT0nZtNkiQ0pKZrsRCQku0LpCpklDkem9CciOnbLQKpZ6mid",
	"ZTFvWB/BUyXSy5UDnz6U7ICE5IPgcicJxgtJsGI0t+Zrp2XO7AtHG4vIR/X6f5vJmKI2lQVsf5kg6JlT",
	"04ELGJgXiPDcNMCK3q9v31qS88tbVVqvpqtT10OGuhEFBVbcfAcFFDjJhvjThxLntF0TurZTVJ4kqDAh",
	"gV8trdGgi6cn5sj+DgxMx3TQl7Va5uW4yQLFm+k9py9XMPTH2QzNKQyQp1fsTjeg6tyo+F8oWzl875S6",
	"1eOyiitz4ENh2g7v94u2mOn997DBfjbfuv19xT8FO2bQWQl/u0EDg5u0XJ6taLnXMMA/KTazNlb9Vtvu",
	"Sbay7ZI81jyjUgc4t+9FVNNb4PnljvWudN7MfrNB5318R3w27TlujPm8yNzXy4eQruvxGL22Wv8GAAD/",
	"/6OtlyqoEAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
