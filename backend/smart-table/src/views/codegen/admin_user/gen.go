// Package viewsLUadminUuser provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package viewsLUadminUuser

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code Код ошибки
	Code string `json:"code"`

	// Message Описание ошибки
	Message string `json:"message"`
}

// Login Логин пользователя
type Login = string

// Password Пароль пользователя
type Password = string

// V1AdminUserSignInRequest defines model for V1AdminUserSignInRequest.
type V1AdminUserSignInRequest struct {
	// Login Логин пользователя
	Login Login `json:"login"`

	// Password Пароль пользователя
	Password Password `json:"password"`
}

// V1AdminUserSignInResponse defines model for V1AdminUserSignInResponse.
type V1AdminUserSignInResponse struct {
	// UserUUID Уникальный идентификатор пользователя
	UserUUID string `json:"user_uuid"`
}

// V1AdminUserSignUpRequest defines model for V1AdminUserSignUpRequest.
type V1AdminUserSignUpRequest struct {
	// FirstName Имя пользователя на латинице
	FirstName string `json:"first_name"`

	// LastName Фамилия пользователя на латинице
	LastName string `json:"last_name"`

	// Login Логин пользователя
	Login Login `json:"login"`

	// Password Пароль пользователя
	Password Password `json:"password"`

	// TgLogin Логин пользователя
	TgLogin Login `json:"tg_login"`
}

// V1AdminUserSignUpResponse defines model for V1AdminUserSignUpResponse.
type V1AdminUserSignUpResponse struct {
	// UserUUID Уникальный идентификатор пользователя
	UserUUID openapi_types.UUID `json:"user_uuid"`
}

// PostAdminV1UserSignInJSONRequestBody defines body for PostAdminV1UserSignIn for application/json ContentType.
type PostAdminV1UserSignInJSONRequestBody = V1AdminUserSignInRequest

// PostAdminV1UserSignUpJSONRequestBody defines body for PostAdminV1UserSignUp for application/json ContentType.
type PostAdminV1UserSignUpJSONRequestBody = V1AdminUserSignUpRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAdminV1UserSignInWithBody request with any body
	PostAdminV1UserSignInWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminV1UserSignIn(ctx context.Context, body PostAdminV1UserSignInJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminV1UserSignUpWithBody request with any body
	PostAdminV1UserSignUpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminV1UserSignUp(ctx context.Context, body PostAdminV1UserSignUpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAdminV1UserSignInWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminV1UserSignInRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminV1UserSignIn(ctx context.Context, body PostAdminV1UserSignInJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminV1UserSignInRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminV1UserSignUpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminV1UserSignUpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminV1UserSignUp(ctx context.Context, body PostAdminV1UserSignUpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminV1UserSignUpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAdminV1UserSignInRequest calls the generic PostAdminV1UserSignIn builder with application/json body
func NewPostAdminV1UserSignInRequest(server string, body PostAdminV1UserSignInJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminV1UserSignInRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAdminV1UserSignInRequestWithBody generates requests for PostAdminV1UserSignIn with any type of body
func NewPostAdminV1UserSignInRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/user/sign-in")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAdminV1UserSignUpRequest calls the generic PostAdminV1UserSignUp builder with application/json body
func NewPostAdminV1UserSignUpRequest(server string, body PostAdminV1UserSignUpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminV1UserSignUpRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAdminV1UserSignUpRequestWithBody generates requests for PostAdminV1UserSignUp with any type of body
func NewPostAdminV1UserSignUpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/user/sign-up")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAdminV1UserSignInWithBodyWithResponse request with any body
	PostAdminV1UserSignInWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminV1UserSignInResponse, error)

	PostAdminV1UserSignInWithResponse(ctx context.Context, body PostAdminV1UserSignInJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminV1UserSignInResponse, error)

	// PostAdminV1UserSignUpWithBodyWithResponse request with any body
	PostAdminV1UserSignUpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminV1UserSignUpResponse, error)

	PostAdminV1UserSignUpWithResponse(ctx context.Context, body PostAdminV1UserSignUpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminV1UserSignUpResponse, error)
}

type PostAdminV1UserSignInResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1AdminUserSignInResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostAdminV1UserSignInResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminV1UserSignInResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminV1UserSignUpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1AdminUserSignUpResponse
	JSON400      *ErrorResponse
	JSON409      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostAdminV1UserSignUpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminV1UserSignUpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAdminV1UserSignInWithBodyWithResponse request with arbitrary body returning *PostAdminV1UserSignInResponse
func (c *ClientWithResponses) PostAdminV1UserSignInWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminV1UserSignInResponse, error) {
	rsp, err := c.PostAdminV1UserSignInWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminV1UserSignInResponse(rsp)
}

func (c *ClientWithResponses) PostAdminV1UserSignInWithResponse(ctx context.Context, body PostAdminV1UserSignInJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminV1UserSignInResponse, error) {
	rsp, err := c.PostAdminV1UserSignIn(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminV1UserSignInResponse(rsp)
}

// PostAdminV1UserSignUpWithBodyWithResponse request with arbitrary body returning *PostAdminV1UserSignUpResponse
func (c *ClientWithResponses) PostAdminV1UserSignUpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminV1UserSignUpResponse, error) {
	rsp, err := c.PostAdminV1UserSignUpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminV1UserSignUpResponse(rsp)
}

func (c *ClientWithResponses) PostAdminV1UserSignUpWithResponse(ctx context.Context, body PostAdminV1UserSignUpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminV1UserSignUpResponse, error) {
	rsp, err := c.PostAdminV1UserSignUp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminV1UserSignUpResponse(rsp)
}

// ParsePostAdminV1UserSignInResponse parses an HTTP response from a PostAdminV1UserSignInWithResponse call
func ParsePostAdminV1UserSignInResponse(rsp *http.Response) (*PostAdminV1UserSignInResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminV1UserSignInResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1AdminUserSignInResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostAdminV1UserSignUpResponse parses an HTTP response from a PostAdminV1UserSignUpWithResponse call
func ParsePostAdminV1UserSignUpResponse(rsp *http.Response) (*PostAdminV1UserSignUpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminV1UserSignUpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1AdminUserSignUpResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Авторизация пользователя в админке
	// (POST /admin/v1/user/sign-in)
	PostAdminV1UserSignIn(c *gin.Context)
	// Регистрация пользователя в админке
	// (POST /admin/v1/user/sign-up)
	PostAdminV1UserSignUp(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostAdminV1UserSignIn operation middleware
func (siw *ServerInterfaceWrapper) PostAdminV1UserSignIn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAdminV1UserSignIn(c)
}

// PostAdminV1UserSignUp operation middleware
func (siw *ServerInterfaceWrapper) PostAdminV1UserSignUp(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAdminV1UserSignUp(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/admin/v1/user/sign-in", wrapper.PostAdminV1UserSignIn)
	router.POST(options.BaseURL+"/admin/v1/user/sign-up", wrapper.PostAdminV1UserSignUp)
}

type PostAdminV1UserSignInRequestObject struct {
	Body *PostAdminV1UserSignInJSONRequestBody
}

type PostAdminV1UserSignInResponseObject interface {
	VisitPostAdminV1UserSignInResponse(w http.ResponseWriter) error
}

type PostAdminV1UserSignIn200ResponseHeaders struct {
	SetCookie string
}

type PostAdminV1UserSignIn200JSONResponse struct {
	Body    V1AdminUserSignInResponse
	Headers PostAdminV1UserSignIn200ResponseHeaders
}

func (response PostAdminV1UserSignIn200JSONResponse) VisitPostAdminV1UserSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostAdminV1UserSignIn400JSONResponse ErrorResponse

func (response PostAdminV1UserSignIn400JSONResponse) VisitPostAdminV1UserSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAdminV1UserSignIn401JSONResponse ErrorResponse

func (response PostAdminV1UserSignIn401JSONResponse) VisitPostAdminV1UserSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostAdminV1UserSignIn500JSONResponse ErrorResponse

func (response PostAdminV1UserSignIn500JSONResponse) VisitPostAdminV1UserSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostAdminV1UserSignUpRequestObject struct {
	Body *PostAdminV1UserSignUpJSONRequestBody
}

type PostAdminV1UserSignUpResponseObject interface {
	VisitPostAdminV1UserSignUpResponse(w http.ResponseWriter) error
}

type PostAdminV1UserSignUp200ResponseHeaders struct {
	SetCookie string
}

type PostAdminV1UserSignUp200JSONResponse struct {
	Body    V1AdminUserSignUpResponse
	Headers PostAdminV1UserSignUp200ResponseHeaders
}

func (response PostAdminV1UserSignUp200JSONResponse) VisitPostAdminV1UserSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostAdminV1UserSignUp400JSONResponse ErrorResponse

func (response PostAdminV1UserSignUp400JSONResponse) VisitPostAdminV1UserSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAdminV1UserSignUp409JSONResponse ErrorResponse

func (response PostAdminV1UserSignUp409JSONResponse) VisitPostAdminV1UserSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostAdminV1UserSignUp500JSONResponse ErrorResponse

func (response PostAdminV1UserSignUp500JSONResponse) VisitPostAdminV1UserSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Авторизация пользователя в админке
	// (POST /admin/v1/user/sign-in)
	PostAdminV1UserSignIn(ctx context.Context, request PostAdminV1UserSignInRequestObject) (PostAdminV1UserSignInResponseObject, error)
	// Регистрация пользователя в админке
	// (POST /admin/v1/user/sign-up)
	PostAdminV1UserSignUp(ctx context.Context, request PostAdminV1UserSignUpRequestObject) (PostAdminV1UserSignUpResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostAdminV1UserSignIn operation middleware
func (sh *strictHandler) PostAdminV1UserSignIn(ctx *gin.Context) {
	var request PostAdminV1UserSignInRequestObject

	var body PostAdminV1UserSignInJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAdminV1UserSignIn(ctx, request.(PostAdminV1UserSignInRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAdminV1UserSignIn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostAdminV1UserSignInResponseObject); ok {
		if err := validResponse.VisitPostAdminV1UserSignInResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAdminV1UserSignUp operation middleware
func (sh *strictHandler) PostAdminV1UserSignUp(ctx *gin.Context) {
	var request PostAdminV1UserSignUpRequestObject

	var body PostAdminV1UserSignUpJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAdminV1UserSignUp(ctx, request.(PostAdminV1UserSignUpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAdminV1UserSignUp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostAdminV1UserSignUpResponseObject); ok {
		if err := validResponse.VisitPostAdminV1UserSignUpResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWb08cRRj/Kuu0Jmp3uT2gplxi4mk0QWtCSqlJu5QMd3PH4N3udma2lZJLDjBNjU0w",
	"vjIaaxP9AOvJyhZ6x1d45huZmYG7PViuXCOgia9gB+aZ3zy/P/Oso0rQDAOf+IKj0jrilRXSxPrXTxgL",
	"2C3Cw8DnRC3gapUKGvi4MceCkDBBCUelGm5wYqMws6SKVvWWKuEVRkO1C5UQ/AQ92LGgJ59CCn/AHqTI",
	"RmItJKiEuGDUr6OWjZqEc1zP2/8cDiCVGxBDF1JIXlOpZSNGHkSUkSoq3TOYBtUX+/8fLK+SilAn3wzq",
	"1M8592fowZ+QQteCA+jBvnwGu9CDDsRyExLYl9uqMP76JvHrYgWVpoo2alL/6HPaRiEWgjBV7P497Dwu",
	"O3cXD3+6zszS4vq0PVVsXc3rxhzm/FHAqjmwfoVYtg2eMwKbnB4CdmMYWNm5i53HrjPz1odXPO+q591/",
	"24tcd/L99955d+naB57nLF7LxXinWK42qb/ACZundX/Wv0UeRISLMVXTOGr/VUZqqISuFAbiLBwqs2A4",
	"ainkg8aM2tBv4HFBmOMyhfIkkXO1N3JExAlbiiKax+NvWs57EGsCu/I7eGlBCjuQQFduQiq/MX+Wm9CT",
	"7VFUj3bAAMMZbroQvhmJNcq4WPJxM8/AP8IruX3qBSzoQmzBvl5JVVPkE0iGFXzdHVJwMU/Bnud4Hj9F",
	"qw18OrzfIYZXkMI+pJcO85y9YCNRXxrnkFPM069iZ5nPtnk8gynZ/YsNVgtYEwtUQvqkYVZdZwY7tbLz",
	"6eL6jZaT/Zwe57M4mfcQjGHllo04qUSMirV5xaHpz8dB8BUl5UjJcR0p2lFFLyEbGTug1UdicDAO6edk",
	"DbVUOerXgpNtLc/NWrCjHSG34EC2IYYO7KumGv/sQqybvmtsNaGKU9FQ1eebmInbeLlBrC+CZdogVnlu",
	"FtnoIWHcVC9OuBOuEkgQEh+HFJXQ1IQ7MWWavqLvVMBKOoWHxYLqR4HTuu8YQYeBCa5jQvgeOoZjSGFX",
	"bkEiN0fYvGNBDDs6Ebqwpy2uFIdVtdkqKqG5gAut3jvFwQOBDFOEi4+C6pqZhnxBfBOkYdigFV2hsMoD",
	"fzBzvc6Gp76xrWFtCBYRvWBcpPs06brniePQrxrIcefJDTiARD5Vmal6GmcZgFg+UVJBNlohuEqYRjtP",
	"hGPUepLBz768ban9ig7oIjsD+rhhFJrpf/Diw/Nw3mV/gQQ6kMi2jphEmUNNqocfygXKJD01wCINrniB",
	"4J73R+U4lwVIbfWwZW/wUj1y/clXP4vKLf2hU13i+oV2+Afoyi25Kds6ZLpyW0mql7mZ3NDozR1ik4VR",
	"s4nZ2gn7H4lvnABQ9fJCJwpHhM4LSFQP5YYGnsr2uQTPQngxwTOYCy83eDKDwlmCR0tmwEKf+/T/SBqK",
	"pJlLiqQ8fnQk5ZvkmRo5/oLEkhtyS34LidoHHeOs/1wuvcjX5ji51Gr9HQAA//+G8RrOyxEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
