// Package views_admin_user provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package views_admin_user

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code Код ошибки
	Code string `json:"code"`

	// Message Описание ошибки
	Message string `json:"message"`
}

// Login Логин пользователя
type Login = string

// Password Пароль пользователя
type Password = string

// V1AdminUserSignInRequest defines model for V1AdminUserSignInRequest.
type V1AdminUserSignInRequest struct {
	// Login Логин пользователя
	Login Login `json:"login"`

	// Password Пароль пользователя
	Password Password `json:"password"`
}

// V1AdminUserSignInResponse defines model for V1AdminUserSignInResponse.
type V1AdminUserSignInResponse struct {
	// JwtToken JWT токен пользователя
	JwtToken string `json:"jwt_token"`

	// UserUUID Уникальный идентификатор пользователя
	UserUUID string `json:"user_uuid"`
}

// V1AdminUserSignUpRequest defines model for V1AdminUserSignUpRequest.
type V1AdminUserSignUpRequest struct {
	// FirstName Имя пользователя на латинице
	FirstName string `json:"first_name"`

	// LastName Фамилия пользователя на латинице
	LastName string `json:"last_name"`

	// Login Логин пользователя
	Login Login `json:"login"`

	// Password Пароль пользователя
	Password Password `json:"password"`

	// TgLogin Логин пользователя
	TgLogin Login `json:"tg_login"`
}

// V1AdminUserSignUpResponse defines model for V1AdminUserSignUpResponse.
type V1AdminUserSignUpResponse struct {
	// JwtToken JWT токен пользователя
	JwtToken string `json:"jwt_token"`

	// UserUUID Уникальный идентификатор пользователя
	UserUUID openapi_types.UUID `json:"user_uuid"`
}

// PostV1AdminUserSignInJSONRequestBody defines body for PostV1AdminUserSignIn for application/json ContentType.
type PostV1AdminUserSignInJSONRequestBody = V1AdminUserSignInRequest

// PostV1AdminUserSignUpJSONRequestBody defines body for PostV1AdminUserSignUp for application/json ContentType.
type PostV1AdminUserSignUpJSONRequestBody = V1AdminUserSignUpRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostV1AdminUserSignInWithBody request with any body
	PostV1AdminUserSignInWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1AdminUserSignIn(ctx context.Context, body PostV1AdminUserSignInJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1AdminUserSignUpWithBody request with any body
	PostV1AdminUserSignUpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1AdminUserSignUp(ctx context.Context, body PostV1AdminUserSignUpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostV1AdminUserSignInWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AdminUserSignInRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AdminUserSignIn(ctx context.Context, body PostV1AdminUserSignInJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AdminUserSignInRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AdminUserSignUpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AdminUserSignUpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AdminUserSignUp(ctx context.Context, body PostV1AdminUserSignUpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AdminUserSignUpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostV1AdminUserSignInRequest calls the generic PostV1AdminUserSignIn builder with application/json body
func NewPostV1AdminUserSignInRequest(server string, body PostV1AdminUserSignInJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1AdminUserSignInRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1AdminUserSignInRequestWithBody generates requests for PostV1AdminUserSignIn with any type of body
func NewPostV1AdminUserSignInRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/admin/user/sign-in")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1AdminUserSignUpRequest calls the generic PostV1AdminUserSignUp builder with application/json body
func NewPostV1AdminUserSignUpRequest(server string, body PostV1AdminUserSignUpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1AdminUserSignUpRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1AdminUserSignUpRequestWithBody generates requests for PostV1AdminUserSignUp with any type of body
func NewPostV1AdminUserSignUpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/admin/user/sign-up")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostV1AdminUserSignInWithBodyWithResponse request with any body
	PostV1AdminUserSignInWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1AdminUserSignInResponse, error)

	PostV1AdminUserSignInWithResponse(ctx context.Context, body PostV1AdminUserSignInJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1AdminUserSignInResponse, error)

	// PostV1AdminUserSignUpWithBodyWithResponse request with any body
	PostV1AdminUserSignUpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1AdminUserSignUpResponse, error)

	PostV1AdminUserSignUpWithResponse(ctx context.Context, body PostV1AdminUserSignUpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1AdminUserSignUpResponse, error)
}

type PostV1AdminUserSignInResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1AdminUserSignInResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostV1AdminUserSignInResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1AdminUserSignInResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1AdminUserSignUpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1AdminUserSignUpResponse
	JSON400      *ErrorResponse
	JSON409      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostV1AdminUserSignUpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1AdminUserSignUpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostV1AdminUserSignInWithBodyWithResponse request with arbitrary body returning *PostV1AdminUserSignInResponse
func (c *ClientWithResponses) PostV1AdminUserSignInWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1AdminUserSignInResponse, error) {
	rsp, err := c.PostV1AdminUserSignInWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AdminUserSignInResponse(rsp)
}

func (c *ClientWithResponses) PostV1AdminUserSignInWithResponse(ctx context.Context, body PostV1AdminUserSignInJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1AdminUserSignInResponse, error) {
	rsp, err := c.PostV1AdminUserSignIn(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AdminUserSignInResponse(rsp)
}

// PostV1AdminUserSignUpWithBodyWithResponse request with arbitrary body returning *PostV1AdminUserSignUpResponse
func (c *ClientWithResponses) PostV1AdminUserSignUpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1AdminUserSignUpResponse, error) {
	rsp, err := c.PostV1AdminUserSignUpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AdminUserSignUpResponse(rsp)
}

func (c *ClientWithResponses) PostV1AdminUserSignUpWithResponse(ctx context.Context, body PostV1AdminUserSignUpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1AdminUserSignUpResponse, error) {
	rsp, err := c.PostV1AdminUserSignUp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AdminUserSignUpResponse(rsp)
}

// ParsePostV1AdminUserSignInResponse parses an HTTP response from a PostV1AdminUserSignInWithResponse call
func ParsePostV1AdminUserSignInResponse(rsp *http.Response) (*PostV1AdminUserSignInResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1AdminUserSignInResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1AdminUserSignInResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV1AdminUserSignUpResponse parses an HTTP response from a PostV1AdminUserSignUpWithResponse call
func ParsePostV1AdminUserSignUpResponse(rsp *http.Response) (*PostV1AdminUserSignUpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1AdminUserSignUpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1AdminUserSignUpResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Авторизация пользователя в админке
	// (POST /v1/admin/user/sign-in)
	PostV1AdminUserSignIn(c *gin.Context)
	// Регистрация пользователя в админке
	// (POST /v1/admin/user/sign-up)
	PostV1AdminUserSignUp(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostV1AdminUserSignIn operation middleware
func (siw *ServerInterfaceWrapper) PostV1AdminUserSignIn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1AdminUserSignIn(c)
}

// PostV1AdminUserSignUp operation middleware
func (siw *ServerInterfaceWrapper) PostV1AdminUserSignUp(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1AdminUserSignUp(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/v1/admin/user/sign-in", wrapper.PostV1AdminUserSignIn)
	router.POST(options.BaseURL+"/v1/admin/user/sign-up", wrapper.PostV1AdminUserSignUp)
}

type PostV1AdminUserSignInRequestObject struct {
	Body *PostV1AdminUserSignInJSONRequestBody
}

type PostV1AdminUserSignInResponseObject interface {
	VisitPostV1AdminUserSignInResponse(w http.ResponseWriter) error
}

type PostV1AdminUserSignIn200ResponseHeaders struct {
	SetCookie string
}

type PostV1AdminUserSignIn200JSONResponse struct {
	Body    V1AdminUserSignInResponse
	Headers PostV1AdminUserSignIn200ResponseHeaders
}

func (response PostV1AdminUserSignIn200JSONResponse) VisitPostV1AdminUserSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostV1AdminUserSignIn400JSONResponse ErrorResponse

func (response PostV1AdminUserSignIn400JSONResponse) VisitPostV1AdminUserSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostV1AdminUserSignIn401JSONResponse ErrorResponse

func (response PostV1AdminUserSignIn401JSONResponse) VisitPostV1AdminUserSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostV1AdminUserSignIn500JSONResponse ErrorResponse

func (response PostV1AdminUserSignIn500JSONResponse) VisitPostV1AdminUserSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostV1AdminUserSignUpRequestObject struct {
	Body *PostV1AdminUserSignUpJSONRequestBody
}

type PostV1AdminUserSignUpResponseObject interface {
	VisitPostV1AdminUserSignUpResponse(w http.ResponseWriter) error
}

type PostV1AdminUserSignUp200ResponseHeaders struct {
	SetCookie string
}

type PostV1AdminUserSignUp200JSONResponse struct {
	Body    V1AdminUserSignUpResponse
	Headers PostV1AdminUserSignUp200ResponseHeaders
}

func (response PostV1AdminUserSignUp200JSONResponse) VisitPostV1AdminUserSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostV1AdminUserSignUp400JSONResponse ErrorResponse

func (response PostV1AdminUserSignUp400JSONResponse) VisitPostV1AdminUserSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostV1AdminUserSignUp409JSONResponse ErrorResponse

func (response PostV1AdminUserSignUp409JSONResponse) VisitPostV1AdminUserSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostV1AdminUserSignUp500JSONResponse ErrorResponse

func (response PostV1AdminUserSignUp500JSONResponse) VisitPostV1AdminUserSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Авторизация пользователя в админке
	// (POST /v1/admin/user/sign-in)
	PostV1AdminUserSignIn(ctx context.Context, request PostV1AdminUserSignInRequestObject) (PostV1AdminUserSignInResponseObject, error)
	// Регистрация пользователя в админке
	// (POST /v1/admin/user/sign-up)
	PostV1AdminUserSignUp(ctx context.Context, request PostV1AdminUserSignUpRequestObject) (PostV1AdminUserSignUpResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostV1AdminUserSignIn operation middleware
func (sh *strictHandler) PostV1AdminUserSignIn(ctx *gin.Context) {
	var request PostV1AdminUserSignInRequestObject

	var body PostV1AdminUserSignInJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostV1AdminUserSignIn(ctx, request.(PostV1AdminUserSignInRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV1AdminUserSignIn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostV1AdminUserSignInResponseObject); ok {
		if err := validResponse.VisitPostV1AdminUserSignInResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostV1AdminUserSignUp operation middleware
func (sh *strictHandler) PostV1AdminUserSignUp(ctx *gin.Context) {
	var request PostV1AdminUserSignUpRequestObject

	var body PostV1AdminUserSignUpJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostV1AdminUserSignUp(ctx, request.(PostV1AdminUserSignUpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV1AdminUserSignUp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostV1AdminUserSignUpResponseObject); ok {
		if err := validResponse.VisitPostV1AdminUserSignUpResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xW7W4bRRR9lWVaJKC78TpJUWMJCYNAChQpalqQ2k2tqT12JrV3tzOzLWlkyUlQVUSl",
	"IH4hEKUSPMBismSb1M4r3HkjNDOJvU42H45IIgS/7Bl77px77zln7gqqBq0w8IkvOCqtIF5dJC2sv37C",
	"WMBuER4GPidqA9dqVNDAx805FoSECUo4KtVxkxMbhZktFbSmj9QIrzIaqlOohOAn6MOmBX35HFL4A7Yh",
	"RTYSyyFBJcQFo34DtW3UIpzjRt75l7ALqVyFGHqQQnJCpLaNGHkUUUZqqHTPYBpGXxj8P3iwRKpC3Xwz",
	"aFA/596foQ9/Qgo9C3ahDzvyBWxBH7oQyzVIYEduqMD465vEb4hFVJoq2qhF/f3ltI1CLARhKtj9e9h5",
	"WnbuLux9us5MZWFl2p4qtq/mVWMOc/4kYLUcWL9CLDsGzymBTU6PALsxCqzs3MXOU9eZeevDK5531fPu",
	"v+1Frjv5/nvvvFu59oHnOQvXcjF+WSzXWtS/wwmbpw1/1r9FHkWEizFZ09wv/1VG6qiErhSG5CzsMbNg",
	"etRWyIeFOe7AoIAHCWGuywTKo0ROamdSxNITURHBQ5JDr8++um3JNejDNiTHU+xQ4SNOWCWKaB47ftMi",
	"2YZYB+vJ7+C1BSlsqkvkGqTyG/Ozulp2xrj2QBmHGOxMlqeo5Z3wbDSpU8ZFxcetPIv4Ed7IjSOTsaAH",
	"sQU7eidVBZLPIBnVyHV3RCPFPI14nuN5/Ag1NPHR8H6HGN5ACjuQXjrMc1abjUSjMs4lR8hzEMXOdj5b",
	"5vEkrGj3n5NwPWAtLFAJ7Qk1yxXXmcFOvex8urByo+1kl9PjLIuTeQ/YGc2ibSNOqhGjYnlescR04OMg",
	"eEhJOVKEX0GKWKiqt5CNjOBU0CEIHNLPyTJqq3DUrweHS1yem7VgU2tOrsOu7EAMXdhRBTYK3YJYN2DL",
	"CHdCBaeiqaLPtzATt/GDJrG+CB7QJrHKc7PIRo8J4yZ6ccKdcFWTg5D4OKSohKYm3Ikp04BFnVPhcbGA",
	"FT8LqjYFThu+YyQTBsYaD5Die+iafkMKW3IdErl2jJF0LYhhU3tOT7ETaTAMq2izNVRCcwEXhx45ZLpG",
	"uPgoqC2bic4XxDdWHYZNWtURCks88Idz40lCP3JOaI/yRLCI6A2jU12nSdc9Txx7jqCBHFShXIVdSORz",
	"5cqqpnG2AxDLZ4oqyEaLBNcI02jniXAMW08yC2RnQB8Uj0Iz/Q8mPjrT5yX7CyTQhUR2tN0kShxq2t5b",
	"KBUokfTVEI40uOIFgns5GPfj3C5AaqunM5vBa/WMDqZ3/fAqtQwGZ5XE9Qut8A/Qk+tyTXa0yfTkhqJU",
	"P5OZXNXoTQ6x8cKo1cJs+ZD898k3jgGoeHmmE4XHmM4rSFQN5aoGnsrOuRjPnfBijGc4eV6u8WRGkdMY",
	"j6bMsAuD3qf/W9KIJc1ckiXl9UdbUr5IXqiR4y9ILLkq1+W3kKhz0DXK+tf50qt8bo7jS+323wEAAP//",
	"m5eP/48SAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
