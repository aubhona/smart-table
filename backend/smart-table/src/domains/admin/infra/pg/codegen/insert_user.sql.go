// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: insert_user.sql

package db

import (
	"context"
)

const insertUser = `-- name: InsertUser :one

INSERT INTO smart_table_admin.users (
    uuid,
    login,
    tg_id,
    tg_login,
    chat_id,
    first_name,
    last_name,
    password_hash,
    created_at,
    updated_at
)
SELECT
    input.uuid,
    input.login,
    input.tg_id,
    input.tg_login,
    input.chat_id,
    input.first_name,
    input.last_name,
    input.password_hash,
    input.created_at,
    input.updated_at
FROM jsonb_to_record($1::jsonb) AS input(
  uuid            UUID,
  login           TEXT,
  tg_id           TEXT,
  tg_login        TEXT,
  chat_id         TEXT,
  first_name      TEXT,
  last_name       TEXT,
  password_hash   TEXT,
  created_at      TIMESTAMPTZ,
  updated_at      TIMESTAMPTZ
)
RETURNING uuid, login, tg_id, tg_login, chat_id, first_name, last_name, password_hash, created_at, updated_at
`

// args:
// $1 - JSONB
func (q *Queries) InsertUser(ctx context.Context, dollar_1 []byte) (SmartTableAdminUser, error) {
	row := q.db.QueryRow(ctx, insertUser, dollar_1)
	var i SmartTableAdminUser
	err := row.Scan(
		&i.Uuid,
		&i.Login,
		&i.TgID,
		&i.TgLogin,
		&i.ChatID,
		&i.FirstName,
		&i.LastName,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
