// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// StrictHandlerFunc is an autogenerated mock type for the StrictHandlerFunc type
type StrictHandlerFunc struct {
	mock.Mock
}

type StrictHandlerFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *StrictHandlerFunc) EXPECT() *StrictHandlerFunc_Expecter {
	return &StrictHandlerFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, request
func (_m *StrictHandlerFunc) Execute(ctx *gin.Context, request interface{}) (interface{}, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, interface{}) (interface{}, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, interface{}) interface{}); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, interface{}) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StrictHandlerFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type StrictHandlerFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx *gin.Context
//   - request interface{}
func (_e *StrictHandlerFunc_Expecter) Execute(ctx interface{}, request interface{}) *StrictHandlerFunc_Execute_Call {
	return &StrictHandlerFunc_Execute_Call{Call: _e.mock.On("Execute", ctx, request)}
}

func (_c *StrictHandlerFunc_Execute_Call) Run(run func(ctx *gin.Context, request interface{})) *StrictHandlerFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *StrictHandlerFunc_Execute_Call) Return(response interface{}, err error) *StrictHandlerFunc_Execute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *StrictHandlerFunc_Execute_Call) RunAndReturn(run func(*gin.Context, interface{}) (interface{}, error)) *StrictHandlerFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewStrictHandlerFunc creates a new instance of StrictHandlerFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStrictHandlerFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *StrictHandlerFunc {
	mock := &StrictHandlerFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
