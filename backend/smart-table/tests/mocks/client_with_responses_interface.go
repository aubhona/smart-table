// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	viewsLUadminUuser "github.com/smart-table/src/views/codegen/admin_user"
)

// ClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type ClientWithResponsesInterface struct {
	mock.Mock
}

type ClientWithResponsesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientWithResponsesInterface) EXPECT() *ClientWithResponsesInterface_Expecter {
	return &ClientWithResponsesInterface_Expecter{mock: &_m.Mock}
}

// PostAdminV1UserSignInWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) PostAdminV1UserSignInWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...viewsLUadminUuser.RequestEditorFn) (*viewsLUadminUuser.PostAdminV1UserSignInResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostAdminV1UserSignInWithBodyWithResponse")
	}

	var r0 *viewsLUadminUuser.PostAdminV1UserSignInResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...viewsLUadminUuser.RequestEditorFn) (*viewsLUadminUuser.PostAdminV1UserSignInResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...viewsLUadminUuser.RequestEditorFn) *viewsLUadminUuser.PostAdminV1UserSignInResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*viewsLUadminUuser.PostAdminV1UserSignInResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...viewsLUadminUuser.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostAdminV1UserSignInWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostAdminV1UserSignInWithBodyWithResponse'
type ClientWithResponsesInterface_PostAdminV1UserSignInWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostAdminV1UserSignInWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...viewsLUadminUuser.RequestEditorFn
func (_e *ClientWithResponsesInterface_Expecter) PostAdminV1UserSignInWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *ClientWithResponsesInterface_PostAdminV1UserSignInWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostAdminV1UserSignInWithBodyWithResponse_Call{Call: _e.mock.On("PostAdminV1UserSignInWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *ClientWithResponsesInterface_PostAdminV1UserSignInWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...viewsLUadminUuser.RequestEditorFn)) *ClientWithResponsesInterface_PostAdminV1UserSignInWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]viewsLUadminUuser.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(viewsLUadminUuser.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostAdminV1UserSignInWithBodyWithResponse_Call) Return(_a0 *viewsLUadminUuser.PostAdminV1UserSignInResponse, _a1 error) *ClientWithResponsesInterface_PostAdminV1UserSignInWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientWithResponsesInterface_PostAdminV1UserSignInWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...viewsLUadminUuser.RequestEditorFn) (*viewsLUadminUuser.PostAdminV1UserSignInResponse, error)) *ClientWithResponsesInterface_PostAdminV1UserSignInWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PostAdminV1UserSignInWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) PostAdminV1UserSignInWithResponse(ctx context.Context, body viewsLUadminUuser.PostAdminV1UserSignInJSONRequestBody, reqEditors ...viewsLUadminUuser.RequestEditorFn) (*viewsLUadminUuser.PostAdminV1UserSignInResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostAdminV1UserSignInWithResponse")
	}

	var r0 *viewsLUadminUuser.PostAdminV1UserSignInResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, viewsLUadminUuser.PostAdminV1UserSignInJSONRequestBody, ...viewsLUadminUuser.RequestEditorFn) (*viewsLUadminUuser.PostAdminV1UserSignInResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, viewsLUadminUuser.PostAdminV1UserSignInJSONRequestBody, ...viewsLUadminUuser.RequestEditorFn) *viewsLUadminUuser.PostAdminV1UserSignInResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*viewsLUadminUuser.PostAdminV1UserSignInResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, viewsLUadminUuser.PostAdminV1UserSignInJSONRequestBody, ...viewsLUadminUuser.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostAdminV1UserSignInWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostAdminV1UserSignInWithResponse'
type ClientWithResponsesInterface_PostAdminV1UserSignInWithResponse_Call struct {
	*mock.Call
}

// PostAdminV1UserSignInWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body viewsLUadminUuser.PostAdminV1UserSignInJSONRequestBody
//   - reqEditors ...viewsLUadminUuser.RequestEditorFn
func (_e *ClientWithResponsesInterface_Expecter) PostAdminV1UserSignInWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *ClientWithResponsesInterface_PostAdminV1UserSignInWithResponse_Call {
	return &ClientWithResponsesInterface_PostAdminV1UserSignInWithResponse_Call{Call: _e.mock.On("PostAdminV1UserSignInWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *ClientWithResponsesInterface_PostAdminV1UserSignInWithResponse_Call) Run(run func(ctx context.Context, body viewsLUadminUuser.PostAdminV1UserSignInJSONRequestBody, reqEditors ...viewsLUadminUuser.RequestEditorFn)) *ClientWithResponsesInterface_PostAdminV1UserSignInWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]viewsLUadminUuser.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(viewsLUadminUuser.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(viewsLUadminUuser.PostAdminV1UserSignInJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostAdminV1UserSignInWithResponse_Call) Return(_a0 *viewsLUadminUuser.PostAdminV1UserSignInResponse, _a1 error) *ClientWithResponsesInterface_PostAdminV1UserSignInWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientWithResponsesInterface_PostAdminV1UserSignInWithResponse_Call) RunAndReturn(run func(context.Context, viewsLUadminUuser.PostAdminV1UserSignInJSONRequestBody, ...viewsLUadminUuser.RequestEditorFn) (*viewsLUadminUuser.PostAdminV1UserSignInResponse, error)) *ClientWithResponsesInterface_PostAdminV1UserSignInWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PostAdminV1UserSignUpWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) PostAdminV1UserSignUpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...viewsLUadminUuser.RequestEditorFn) (*viewsLUadminUuser.PostAdminV1UserSignUpResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostAdminV1UserSignUpWithBodyWithResponse")
	}

	var r0 *viewsLUadminUuser.PostAdminV1UserSignUpResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...viewsLUadminUuser.RequestEditorFn) (*viewsLUadminUuser.PostAdminV1UserSignUpResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...viewsLUadminUuser.RequestEditorFn) *viewsLUadminUuser.PostAdminV1UserSignUpResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*viewsLUadminUuser.PostAdminV1UserSignUpResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...viewsLUadminUuser.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostAdminV1UserSignUpWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostAdminV1UserSignUpWithBodyWithResponse'
type ClientWithResponsesInterface_PostAdminV1UserSignUpWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostAdminV1UserSignUpWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...viewsLUadminUuser.RequestEditorFn
func (_e *ClientWithResponsesInterface_Expecter) PostAdminV1UserSignUpWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *ClientWithResponsesInterface_PostAdminV1UserSignUpWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostAdminV1UserSignUpWithBodyWithResponse_Call{Call: _e.mock.On("PostAdminV1UserSignUpWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *ClientWithResponsesInterface_PostAdminV1UserSignUpWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...viewsLUadminUuser.RequestEditorFn)) *ClientWithResponsesInterface_PostAdminV1UserSignUpWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]viewsLUadminUuser.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(viewsLUadminUuser.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostAdminV1UserSignUpWithBodyWithResponse_Call) Return(_a0 *viewsLUadminUuser.PostAdminV1UserSignUpResponse, _a1 error) *ClientWithResponsesInterface_PostAdminV1UserSignUpWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientWithResponsesInterface_PostAdminV1UserSignUpWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...viewsLUadminUuser.RequestEditorFn) (*viewsLUadminUuser.PostAdminV1UserSignUpResponse, error)) *ClientWithResponsesInterface_PostAdminV1UserSignUpWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PostAdminV1UserSignUpWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) PostAdminV1UserSignUpWithResponse(ctx context.Context, body viewsLUadminUuser.PostAdminV1UserSignUpJSONRequestBody, reqEditors ...viewsLUadminUuser.RequestEditorFn) (*viewsLUadminUuser.PostAdminV1UserSignUpResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostAdminV1UserSignUpWithResponse")
	}

	var r0 *viewsLUadminUuser.PostAdminV1UserSignUpResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, viewsLUadminUuser.PostAdminV1UserSignUpJSONRequestBody, ...viewsLUadminUuser.RequestEditorFn) (*viewsLUadminUuser.PostAdminV1UserSignUpResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, viewsLUadminUuser.PostAdminV1UserSignUpJSONRequestBody, ...viewsLUadminUuser.RequestEditorFn) *viewsLUadminUuser.PostAdminV1UserSignUpResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*viewsLUadminUuser.PostAdminV1UserSignUpResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, viewsLUadminUuser.PostAdminV1UserSignUpJSONRequestBody, ...viewsLUadminUuser.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostAdminV1UserSignUpWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostAdminV1UserSignUpWithResponse'
type ClientWithResponsesInterface_PostAdminV1UserSignUpWithResponse_Call struct {
	*mock.Call
}

// PostAdminV1UserSignUpWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body viewsLUadminUuser.PostAdminV1UserSignUpJSONRequestBody
//   - reqEditors ...viewsLUadminUuser.RequestEditorFn
func (_e *ClientWithResponsesInterface_Expecter) PostAdminV1UserSignUpWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *ClientWithResponsesInterface_PostAdminV1UserSignUpWithResponse_Call {
	return &ClientWithResponsesInterface_PostAdminV1UserSignUpWithResponse_Call{Call: _e.mock.On("PostAdminV1UserSignUpWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *ClientWithResponsesInterface_PostAdminV1UserSignUpWithResponse_Call) Run(run func(ctx context.Context, body viewsLUadminUuser.PostAdminV1UserSignUpJSONRequestBody, reqEditors ...viewsLUadminUuser.RequestEditorFn)) *ClientWithResponsesInterface_PostAdminV1UserSignUpWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]viewsLUadminUuser.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(viewsLUadminUuser.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(viewsLUadminUuser.PostAdminV1UserSignUpJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostAdminV1UserSignUpWithResponse_Call) Return(_a0 *viewsLUadminUuser.PostAdminV1UserSignUpResponse, _a1 error) *ClientWithResponsesInterface_PostAdminV1UserSignUpWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientWithResponsesInterface_PostAdminV1UserSignUpWithResponse_Call) RunAndReturn(run func(context.Context, viewsLUadminUuser.PostAdminV1UserSignUpJSONRequestBody, ...viewsLUadminUuser.RequestEditorFn) (*viewsLUadminUuser.PostAdminV1UserSignUpResponse, error)) *ClientWithResponsesInterface_PostAdminV1UserSignUpWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientWithResponsesInterface creates a new instance of ClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientWithResponsesInterface {
	mock := &ClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
