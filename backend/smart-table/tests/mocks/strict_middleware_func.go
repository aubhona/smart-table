// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	gin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	mock "github.com/stretchr/testify/mock"
)

// StrictMiddlewareFunc is an autogenerated mock type for the StrictMiddlewareFunc type
type StrictMiddlewareFunc struct {
	mock.Mock
}

type StrictMiddlewareFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *StrictMiddlewareFunc) EXPECT() *StrictMiddlewareFunc_Expecter {
	return &StrictMiddlewareFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: f, operationID
func (_m *StrictMiddlewareFunc) Execute(f gin.StrictGinHandlerFunc, operationID string) gin.StrictGinHandlerFunc {
	ret := _m.Called(f, operationID)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 gin.StrictGinHandlerFunc
	if rf, ok := ret.Get(0).(func(gin.StrictGinHandlerFunc, string) gin.StrictGinHandlerFunc); ok {
		r0 = rf(f, operationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.StrictGinHandlerFunc)
		}
	}

	return r0
}

// StrictMiddlewareFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type StrictMiddlewareFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - f gin.StrictGinHandlerFunc
//   - operationID string
func (_e *StrictMiddlewareFunc_Expecter) Execute(f interface{}, operationID interface{}) *StrictMiddlewareFunc_Execute_Call {
	return &StrictMiddlewareFunc_Execute_Call{Call: _e.mock.On("Execute", f, operationID)}
}

func (_c *StrictMiddlewareFunc_Execute_Call) Run(run func(f gin.StrictGinHandlerFunc, operationID string)) *StrictMiddlewareFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gin.StrictGinHandlerFunc), args[1].(string))
	})
	return _c
}

func (_c *StrictMiddlewareFunc_Execute_Call) Return(_a0 gin.StrictGinHandlerFunc) *StrictMiddlewareFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StrictMiddlewareFunc_Execute_Call) RunAndReturn(run func(gin.StrictGinHandlerFunc, string) gin.StrictGinHandlerFunc) *StrictMiddlewareFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewStrictMiddlewareFunc creates a new instance of StrictMiddlewareFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStrictMiddlewareFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *StrictMiddlewareFunc {
	mock := &StrictMiddlewareFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
