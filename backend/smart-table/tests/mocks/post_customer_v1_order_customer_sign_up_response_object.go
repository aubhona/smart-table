// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// PostCustomerV1OrderCustomerSignUpResponseObject is an autogenerated mock type for the PostCustomerV1OrderCustomerSignUpResponseObject type
type PostCustomerV1OrderCustomerSignUpResponseObject struct {
	mock.Mock
}

type PostCustomerV1OrderCustomerSignUpResponseObject_Expecter struct {
	mock *mock.Mock
}

func (_m *PostCustomerV1OrderCustomerSignUpResponseObject) EXPECT() *PostCustomerV1OrderCustomerSignUpResponseObject_Expecter {
	return &PostCustomerV1OrderCustomerSignUpResponseObject_Expecter{mock: &_m.Mock}
}

// VisitPostCustomerV1OrderCustomerSignUpResponse provides a mock function with given fields: w
func (_m *PostCustomerV1OrderCustomerSignUpResponseObject) VisitPostCustomerV1OrderCustomerSignUpResponse(w http.ResponseWriter) error {
	ret := _m.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for VisitPostCustomerV1OrderCustomerSignUpResponse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(http.ResponseWriter) error); ok {
		r0 = rf(w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostCustomerV1OrderCustomerSignUpResponseObject_VisitPostCustomerV1OrderCustomerSignUpResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitPostCustomerV1OrderCustomerSignUpResponse'
type PostCustomerV1OrderCustomerSignUpResponseObject_VisitPostCustomerV1OrderCustomerSignUpResponse_Call struct {
	*mock.Call
}

// VisitPostCustomerV1OrderCustomerSignUpResponse is a helper method to define mock.On call
//   - w http.ResponseWriter
func (_e *PostCustomerV1OrderCustomerSignUpResponseObject_Expecter) VisitPostCustomerV1OrderCustomerSignUpResponse(w interface{}) *PostCustomerV1OrderCustomerSignUpResponseObject_VisitPostCustomerV1OrderCustomerSignUpResponse_Call {
	return &PostCustomerV1OrderCustomerSignUpResponseObject_VisitPostCustomerV1OrderCustomerSignUpResponse_Call{Call: _e.mock.On("VisitPostCustomerV1OrderCustomerSignUpResponse", w)}
}

func (_c *PostCustomerV1OrderCustomerSignUpResponseObject_VisitPostCustomerV1OrderCustomerSignUpResponse_Call) Run(run func(w http.ResponseWriter)) *PostCustomerV1OrderCustomerSignUpResponseObject_VisitPostCustomerV1OrderCustomerSignUpResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter))
	})
	return _c
}

func (_c *PostCustomerV1OrderCustomerSignUpResponseObject_VisitPostCustomerV1OrderCustomerSignUpResponse_Call) Return(_a0 error) *PostCustomerV1OrderCustomerSignUpResponseObject_VisitPostCustomerV1OrderCustomerSignUpResponse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostCustomerV1OrderCustomerSignUpResponseObject_VisitPostCustomerV1OrderCustomerSignUpResponse_Call) RunAndReturn(run func(http.ResponseWriter) error) *PostCustomerV1OrderCustomerSignUpResponseObject_VisitPostCustomerV1OrderCustomerSignUpResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewPostCustomerV1OrderCustomerSignUpResponseObject creates a new instance of PostCustomerV1OrderCustomerSignUpResponseObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostCustomerV1OrderCustomerSignUpResponseObject(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostCustomerV1OrderCustomerSignUpResponseObject {
	mock := &PostCustomerV1OrderCustomerSignUpResponseObject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
