// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// ServerInterface is an autogenerated mock type for the ServerInterface type
type ServerInterface struct {
	mock.Mock
}

type ServerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ServerInterface) EXPECT() *ServerInterface_Expecter {
	return &ServerInterface_Expecter{mock: &_m.Mock}
}

// PostCustomerV1OrderCreate provides a mock function with given fields: c
func (_m *ServerInterface) PostCustomerV1OrderCreate(c *gin.Context) {
	_m.Called(c)
}

// ServerInterface_PostCustomerV1OrderCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostCustomerV1OrderCreate'
type ServerInterface_PostCustomerV1OrderCreate_Call struct {
	*mock.Call
}

// PostCustomerV1OrderCreate is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ServerInterface_Expecter) PostCustomerV1OrderCreate(c interface{}) *ServerInterface_PostCustomerV1OrderCreate_Call {
	return &ServerInterface_PostCustomerV1OrderCreate_Call{Call: _e.mock.On("PostCustomerV1OrderCreate", c)}
}

func (_c *ServerInterface_PostCustomerV1OrderCreate_Call) Run(run func(c *gin.Context)) *ServerInterface_PostCustomerV1OrderCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ServerInterface_PostCustomerV1OrderCreate_Call) Return() *ServerInterface_PostCustomerV1OrderCreate_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServerInterface_PostCustomerV1OrderCreate_Call) RunAndReturn(run func(*gin.Context)) *ServerInterface_PostCustomerV1OrderCreate_Call {
	_c.Run(run)
	return _c
}

// PostCustomerV1OrderCustomerSignIn provides a mock function with given fields: c
func (_m *ServerInterface) PostCustomerV1OrderCustomerSignIn(c *gin.Context) {
	_m.Called(c)
}

// ServerInterface_PostCustomerV1OrderCustomerSignIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostCustomerV1OrderCustomerSignIn'
type ServerInterface_PostCustomerV1OrderCustomerSignIn_Call struct {
	*mock.Call
}

// PostCustomerV1OrderCustomerSignIn is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ServerInterface_Expecter) PostCustomerV1OrderCustomerSignIn(c interface{}) *ServerInterface_PostCustomerV1OrderCustomerSignIn_Call {
	return &ServerInterface_PostCustomerV1OrderCustomerSignIn_Call{Call: _e.mock.On("PostCustomerV1OrderCustomerSignIn", c)}
}

func (_c *ServerInterface_PostCustomerV1OrderCustomerSignIn_Call) Run(run func(c *gin.Context)) *ServerInterface_PostCustomerV1OrderCustomerSignIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ServerInterface_PostCustomerV1OrderCustomerSignIn_Call) Return() *ServerInterface_PostCustomerV1OrderCustomerSignIn_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServerInterface_PostCustomerV1OrderCustomerSignIn_Call) RunAndReturn(run func(*gin.Context)) *ServerInterface_PostCustomerV1OrderCustomerSignIn_Call {
	_c.Run(run)
	return _c
}

// PostCustomerV1OrderCustomerSignUp provides a mock function with given fields: c
func (_m *ServerInterface) PostCustomerV1OrderCustomerSignUp(c *gin.Context) {
	_m.Called(c)
}

// ServerInterface_PostCustomerV1OrderCustomerSignUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostCustomerV1OrderCustomerSignUp'
type ServerInterface_PostCustomerV1OrderCustomerSignUp_Call struct {
	*mock.Call
}

// PostCustomerV1OrderCustomerSignUp is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ServerInterface_Expecter) PostCustomerV1OrderCustomerSignUp(c interface{}) *ServerInterface_PostCustomerV1OrderCustomerSignUp_Call {
	return &ServerInterface_PostCustomerV1OrderCustomerSignUp_Call{Call: _e.mock.On("PostCustomerV1OrderCustomerSignUp", c)}
}

func (_c *ServerInterface_PostCustomerV1OrderCustomerSignUp_Call) Run(run func(c *gin.Context)) *ServerInterface_PostCustomerV1OrderCustomerSignUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ServerInterface_PostCustomerV1OrderCustomerSignUp_Call) Return() *ServerInterface_PostCustomerV1OrderCustomerSignUp_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServerInterface_PostCustomerV1OrderCustomerSignUp_Call) RunAndReturn(run func(*gin.Context)) *ServerInterface_PostCustomerV1OrderCustomerSignUp_Call {
	_c.Run(run)
	return _c
}

// NewServerInterface creates a new instance of ServerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServerInterface {
	mock := &ServerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
