// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/smart-table/src/domains/customer/domain"
	mock "github.com/stretchr/testify/mock"

	utils "github.com/smart-table/src/utils"

	uuid "github.com/google/uuid"
)

// CustomerRepository is an autogenerated mock type for the CustomerRepository type
type CustomerRepository struct {
	mock.Mock
}

type CustomerRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CustomerRepository) EXPECT() *CustomerRepository_Expecter {
	return &CustomerRepository_Expecter{mock: &_m.Mock}
}

// FindCustomer provides a mock function with given fields: ctx, customerUUID
func (_m *CustomerRepository) FindCustomer(ctx context.Context, customerUUID uuid.UUID) (utils.SharedRef[domain.Customer], error) {
	ret := _m.Called(ctx, customerUUID)

	if len(ret) == 0 {
		panic("no return value specified for FindCustomer")
	}

	var r0 utils.SharedRef[domain.Customer]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (utils.SharedRef[domain.Customer], error)); ok {
		return rf(ctx, customerUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) utils.SharedRef[domain.Customer]); ok {
		r0 = rf(ctx, customerUUID)
	} else {
		r0 = ret.Get(0).(utils.SharedRef[domain.Customer])
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, customerUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerRepository_FindCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindCustomer'
type CustomerRepository_FindCustomer_Call struct {
	*mock.Call
}

// FindCustomer is a helper method to define mock.On call
//   - ctx context.Context
//   - customerUUID uuid.UUID
func (_e *CustomerRepository_Expecter) FindCustomer(ctx interface{}, customerUUID interface{}) *CustomerRepository_FindCustomer_Call {
	return &CustomerRepository_FindCustomer_Call{Call: _e.mock.On("FindCustomer", ctx, customerUUID)}
}

func (_c *CustomerRepository_FindCustomer_Call) Run(run func(ctx context.Context, customerUUID uuid.UUID)) *CustomerRepository_FindCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *CustomerRepository_FindCustomer_Call) Return(_a0 utils.SharedRef[domain.Customer], _a1 error) *CustomerRepository_FindCustomer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomerRepository_FindCustomer_Call) RunAndReturn(run func(context.Context, uuid.UUID) (utils.SharedRef[domain.Customer], error)) *CustomerRepository_FindCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// FindCustomerByTgID provides a mock function with given fields: ctx, customerTgID
func (_m *CustomerRepository) FindCustomerByTgID(ctx context.Context, customerTgID string) (utils.SharedRef[domain.Customer], error) {
	ret := _m.Called(ctx, customerTgID)

	if len(ret) == 0 {
		panic("no return value specified for FindCustomerByTgID")
	}

	var r0 utils.SharedRef[domain.Customer]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (utils.SharedRef[domain.Customer], error)); ok {
		return rf(ctx, customerTgID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) utils.SharedRef[domain.Customer]); ok {
		r0 = rf(ctx, customerTgID)
	} else {
		r0 = ret.Get(0).(utils.SharedRef[domain.Customer])
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerTgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerRepository_FindCustomerByTgID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindCustomerByTgID'
type CustomerRepository_FindCustomerByTgID_Call struct {
	*mock.Call
}

// FindCustomerByTgID is a helper method to define mock.On call
//   - ctx context.Context
//   - customerTgID string
func (_e *CustomerRepository_Expecter) FindCustomerByTgID(ctx interface{}, customerTgID interface{}) *CustomerRepository_FindCustomerByTgID_Call {
	return &CustomerRepository_FindCustomerByTgID_Call{Call: _e.mock.On("FindCustomerByTgID", ctx, customerTgID)}
}

func (_c *CustomerRepository_FindCustomerByTgID_Call) Run(run func(ctx context.Context, customerTgID string)) *CustomerRepository_FindCustomerByTgID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CustomerRepository_FindCustomerByTgID_Call) Return(_a0 utils.SharedRef[domain.Customer], _a1 error) *CustomerRepository_FindCustomerByTgID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomerRepository_FindCustomerByTgID_Call) RunAndReturn(run func(context.Context, string) (utils.SharedRef[domain.Customer], error)) *CustomerRepository_FindCustomerByTgID_Call {
	_c.Call.Return(run)
	return _c
}

// SaveAndUpdate provides a mock function with given fields: ctx, customer
func (_m *CustomerRepository) SaveAndUpdate(ctx context.Context, customer utils.SharedRef[domain.Customer]) error {
	ret := _m.Called(ctx, customer)

	if len(ret) == 0 {
		panic("no return value specified for SaveAndUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, utils.SharedRef[domain.Customer]) error); ok {
		r0 = rf(ctx, customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CustomerRepository_SaveAndUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveAndUpdate'
type CustomerRepository_SaveAndUpdate_Call struct {
	*mock.Call
}

// SaveAndUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - customer utils.SharedRef[domain.Customer]
func (_e *CustomerRepository_Expecter) SaveAndUpdate(ctx interface{}, customer interface{}) *CustomerRepository_SaveAndUpdate_Call {
	return &CustomerRepository_SaveAndUpdate_Call{Call: _e.mock.On("SaveAndUpdate", ctx, customer)}
}

func (_c *CustomerRepository_SaveAndUpdate_Call) Run(run func(ctx context.Context, customer utils.SharedRef[domain.Customer])) *CustomerRepository_SaveAndUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(utils.SharedRef[domain.Customer]))
	})
	return _c
}

func (_c *CustomerRepository_SaveAndUpdate_Call) Return(_a0 error) *CustomerRepository_SaveAndUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CustomerRepository_SaveAndUpdate_Call) RunAndReturn(run func(context.Context, utils.SharedRef[domain.Customer]) error) *CustomerRepository_SaveAndUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// NewCustomerRepository creates a new instance of CustomerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustomerRepository {
	mock := &CustomerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
