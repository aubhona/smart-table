// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"

	viewsLUcustomer "github.com/smart-table/src/views/codegen/customer"
)

// ClientInterface is an autogenerated mock type for the ClientInterface type
type ClientInterface struct {
	mock.Mock
}

type ClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientInterface) EXPECT() *ClientInterface_Expecter {
	return &ClientInterface_Expecter{mock: &_m.Mock}
}

// PostCustomerV1OrderCreate provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientInterface) PostCustomerV1OrderCreate(ctx context.Context, body viewsLUcustomer.PostCustomerV1OrderCreateJSONRequestBody, reqEditors ...viewsLUcustomer.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostCustomerV1OrderCreate")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, viewsLUcustomer.PostCustomerV1OrderCreateJSONRequestBody, ...viewsLUcustomer.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, viewsLUcustomer.PostCustomerV1OrderCreateJSONRequestBody, ...viewsLUcustomer.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, viewsLUcustomer.PostCustomerV1OrderCreateJSONRequestBody, ...viewsLUcustomer.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostCustomerV1OrderCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostCustomerV1OrderCreate'
type ClientInterface_PostCustomerV1OrderCreate_Call struct {
	*mock.Call
}

// PostCustomerV1OrderCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - body viewsLUcustomer.PostCustomerV1OrderCreateJSONRequestBody
//   - reqEditors ...viewsLUcustomer.RequestEditorFn
func (_e *ClientInterface_Expecter) PostCustomerV1OrderCreate(ctx interface{}, body interface{}, reqEditors ...interface{}) *ClientInterface_PostCustomerV1OrderCreate_Call {
	return &ClientInterface_PostCustomerV1OrderCreate_Call{Call: _e.mock.On("PostCustomerV1OrderCreate",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *ClientInterface_PostCustomerV1OrderCreate_Call) Run(run func(ctx context.Context, body viewsLUcustomer.PostCustomerV1OrderCreateJSONRequestBody, reqEditors ...viewsLUcustomer.RequestEditorFn)) *ClientInterface_PostCustomerV1OrderCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]viewsLUcustomer.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(viewsLUcustomer.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(viewsLUcustomer.PostCustomerV1OrderCreateJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *ClientInterface_PostCustomerV1OrderCreate_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostCustomerV1OrderCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientInterface_PostCustomerV1OrderCreate_Call) RunAndReturn(run func(context.Context, viewsLUcustomer.PostCustomerV1OrderCreateJSONRequestBody, ...viewsLUcustomer.RequestEditorFn) (*http.Response, error)) *ClientInterface_PostCustomerV1OrderCreate_Call {
	_c.Call.Return(run)
	return _c
}

// PostCustomerV1OrderCreateWithBody provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientInterface) PostCustomerV1OrderCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...viewsLUcustomer.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostCustomerV1OrderCreateWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...viewsLUcustomer.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...viewsLUcustomer.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...viewsLUcustomer.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostCustomerV1OrderCreateWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostCustomerV1OrderCreateWithBody'
type ClientInterface_PostCustomerV1OrderCreateWithBody_Call struct {
	*mock.Call
}

// PostCustomerV1OrderCreateWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...viewsLUcustomer.RequestEditorFn
func (_e *ClientInterface_Expecter) PostCustomerV1OrderCreateWithBody(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *ClientInterface_PostCustomerV1OrderCreateWithBody_Call {
	return &ClientInterface_PostCustomerV1OrderCreateWithBody_Call{Call: _e.mock.On("PostCustomerV1OrderCreateWithBody",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *ClientInterface_PostCustomerV1OrderCreateWithBody_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...viewsLUcustomer.RequestEditorFn)) *ClientInterface_PostCustomerV1OrderCreateWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]viewsLUcustomer.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(viewsLUcustomer.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *ClientInterface_PostCustomerV1OrderCreateWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostCustomerV1OrderCreateWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientInterface_PostCustomerV1OrderCreateWithBody_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...viewsLUcustomer.RequestEditorFn) (*http.Response, error)) *ClientInterface_PostCustomerV1OrderCreateWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PostCustomerV1OrderCustomerSignIn provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientInterface) PostCustomerV1OrderCustomerSignIn(ctx context.Context, body viewsLUcustomer.PostCustomerV1OrderCustomerSignInJSONRequestBody, reqEditors ...viewsLUcustomer.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostCustomerV1OrderCustomerSignIn")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, viewsLUcustomer.PostCustomerV1OrderCustomerSignInJSONRequestBody, ...viewsLUcustomer.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, viewsLUcustomer.PostCustomerV1OrderCustomerSignInJSONRequestBody, ...viewsLUcustomer.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, viewsLUcustomer.PostCustomerV1OrderCustomerSignInJSONRequestBody, ...viewsLUcustomer.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostCustomerV1OrderCustomerSignIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostCustomerV1OrderCustomerSignIn'
type ClientInterface_PostCustomerV1OrderCustomerSignIn_Call struct {
	*mock.Call
}

// PostCustomerV1OrderCustomerSignIn is a helper method to define mock.On call
//   - ctx context.Context
//   - body viewsLUcustomer.PostCustomerV1OrderCustomerSignInJSONRequestBody
//   - reqEditors ...viewsLUcustomer.RequestEditorFn
func (_e *ClientInterface_Expecter) PostCustomerV1OrderCustomerSignIn(ctx interface{}, body interface{}, reqEditors ...interface{}) *ClientInterface_PostCustomerV1OrderCustomerSignIn_Call {
	return &ClientInterface_PostCustomerV1OrderCustomerSignIn_Call{Call: _e.mock.On("PostCustomerV1OrderCustomerSignIn",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *ClientInterface_PostCustomerV1OrderCustomerSignIn_Call) Run(run func(ctx context.Context, body viewsLUcustomer.PostCustomerV1OrderCustomerSignInJSONRequestBody, reqEditors ...viewsLUcustomer.RequestEditorFn)) *ClientInterface_PostCustomerV1OrderCustomerSignIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]viewsLUcustomer.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(viewsLUcustomer.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(viewsLUcustomer.PostCustomerV1OrderCustomerSignInJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *ClientInterface_PostCustomerV1OrderCustomerSignIn_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostCustomerV1OrderCustomerSignIn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientInterface_PostCustomerV1OrderCustomerSignIn_Call) RunAndReturn(run func(context.Context, viewsLUcustomer.PostCustomerV1OrderCustomerSignInJSONRequestBody, ...viewsLUcustomer.RequestEditorFn) (*http.Response, error)) *ClientInterface_PostCustomerV1OrderCustomerSignIn_Call {
	_c.Call.Return(run)
	return _c
}

// PostCustomerV1OrderCustomerSignInWithBody provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientInterface) PostCustomerV1OrderCustomerSignInWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...viewsLUcustomer.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostCustomerV1OrderCustomerSignInWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...viewsLUcustomer.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...viewsLUcustomer.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...viewsLUcustomer.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostCustomerV1OrderCustomerSignInWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostCustomerV1OrderCustomerSignInWithBody'
type ClientInterface_PostCustomerV1OrderCustomerSignInWithBody_Call struct {
	*mock.Call
}

// PostCustomerV1OrderCustomerSignInWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...viewsLUcustomer.RequestEditorFn
func (_e *ClientInterface_Expecter) PostCustomerV1OrderCustomerSignInWithBody(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *ClientInterface_PostCustomerV1OrderCustomerSignInWithBody_Call {
	return &ClientInterface_PostCustomerV1OrderCustomerSignInWithBody_Call{Call: _e.mock.On("PostCustomerV1OrderCustomerSignInWithBody",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *ClientInterface_PostCustomerV1OrderCustomerSignInWithBody_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...viewsLUcustomer.RequestEditorFn)) *ClientInterface_PostCustomerV1OrderCustomerSignInWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]viewsLUcustomer.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(viewsLUcustomer.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *ClientInterface_PostCustomerV1OrderCustomerSignInWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostCustomerV1OrderCustomerSignInWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientInterface_PostCustomerV1OrderCustomerSignInWithBody_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...viewsLUcustomer.RequestEditorFn) (*http.Response, error)) *ClientInterface_PostCustomerV1OrderCustomerSignInWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PostCustomerV1OrderCustomerSignUpWithBody provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientInterface) PostCustomerV1OrderCustomerSignUpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...viewsLUcustomer.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostCustomerV1OrderCustomerSignUpWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...viewsLUcustomer.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...viewsLUcustomer.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...viewsLUcustomer.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostCustomerV1OrderCustomerSignUpWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostCustomerV1OrderCustomerSignUpWithBody'
type ClientInterface_PostCustomerV1OrderCustomerSignUpWithBody_Call struct {
	*mock.Call
}

// PostCustomerV1OrderCustomerSignUpWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...viewsLUcustomer.RequestEditorFn
func (_e *ClientInterface_Expecter) PostCustomerV1OrderCustomerSignUpWithBody(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *ClientInterface_PostCustomerV1OrderCustomerSignUpWithBody_Call {
	return &ClientInterface_PostCustomerV1OrderCustomerSignUpWithBody_Call{Call: _e.mock.On("PostCustomerV1OrderCustomerSignUpWithBody",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *ClientInterface_PostCustomerV1OrderCustomerSignUpWithBody_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...viewsLUcustomer.RequestEditorFn)) *ClientInterface_PostCustomerV1OrderCustomerSignUpWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]viewsLUcustomer.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(viewsLUcustomer.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *ClientInterface_PostCustomerV1OrderCustomerSignUpWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostCustomerV1OrderCustomerSignUpWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientInterface_PostCustomerV1OrderCustomerSignUpWithBody_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...viewsLUcustomer.RequestEditorFn) (*http.Response, error)) *ClientInterface_PostCustomerV1OrderCustomerSignUpWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientInterface creates a new instance of ClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientInterface {
	mock := &ClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
