// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	viewsLUcustomer "github.com/smart-table/src/views/codegen/customer"
	mock "github.com/stretchr/testify/mock"
)

// StrictServerInterface is an autogenerated mock type for the StrictServerInterface type
type StrictServerInterface struct {
	mock.Mock
}

type StrictServerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *StrictServerInterface) EXPECT() *StrictServerInterface_Expecter {
	return &StrictServerInterface_Expecter{mock: &_m.Mock}
}

// PostCustomerV1OrderCreate provides a mock function with given fields: ctx, request
func (_m *StrictServerInterface) PostCustomerV1OrderCreate(ctx context.Context, request viewsLUcustomer.PostCustomerV1OrderCreateRequestObject) (viewsLUcustomer.PostCustomerV1OrderCreateResponseObject, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for PostCustomerV1OrderCreate")
	}

	var r0 viewsLUcustomer.PostCustomerV1OrderCreateResponseObject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, viewsLUcustomer.PostCustomerV1OrderCreateRequestObject) (viewsLUcustomer.PostCustomerV1OrderCreateResponseObject, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, viewsLUcustomer.PostCustomerV1OrderCreateRequestObject) viewsLUcustomer.PostCustomerV1OrderCreateResponseObject); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(viewsLUcustomer.PostCustomerV1OrderCreateResponseObject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, viewsLUcustomer.PostCustomerV1OrderCreateRequestObject) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StrictServerInterface_PostCustomerV1OrderCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostCustomerV1OrderCreate'
type StrictServerInterface_PostCustomerV1OrderCreate_Call struct {
	*mock.Call
}

// PostCustomerV1OrderCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - request viewsLUcustomer.PostCustomerV1OrderCreateRequestObject
func (_e *StrictServerInterface_Expecter) PostCustomerV1OrderCreate(ctx interface{}, request interface{}) *StrictServerInterface_PostCustomerV1OrderCreate_Call {
	return &StrictServerInterface_PostCustomerV1OrderCreate_Call{Call: _e.mock.On("PostCustomerV1OrderCreate", ctx, request)}
}

func (_c *StrictServerInterface_PostCustomerV1OrderCreate_Call) Run(run func(ctx context.Context, request viewsLUcustomer.PostCustomerV1OrderCreateRequestObject)) *StrictServerInterface_PostCustomerV1OrderCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(viewsLUcustomer.PostCustomerV1OrderCreateRequestObject))
	})
	return _c
}

func (_c *StrictServerInterface_PostCustomerV1OrderCreate_Call) Return(_a0 viewsLUcustomer.PostCustomerV1OrderCreateResponseObject, _a1 error) *StrictServerInterface_PostCustomerV1OrderCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StrictServerInterface_PostCustomerV1OrderCreate_Call) RunAndReturn(run func(context.Context, viewsLUcustomer.PostCustomerV1OrderCreateRequestObject) (viewsLUcustomer.PostCustomerV1OrderCreateResponseObject, error)) *StrictServerInterface_PostCustomerV1OrderCreate_Call {
	_c.Call.Return(run)
	return _c
}

// PostCustomerV1OrderCustomerSignIn provides a mock function with given fields: ctx, request
func (_m *StrictServerInterface) PostCustomerV1OrderCustomerSignIn(ctx context.Context, request viewsLUcustomer.PostCustomerV1OrderCustomerSignInRequestObject) (viewsLUcustomer.PostCustomerV1OrderCustomerSignInResponseObject, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for PostCustomerV1OrderCustomerSignIn")
	}

	var r0 viewsLUcustomer.PostCustomerV1OrderCustomerSignInResponseObject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, viewsLUcustomer.PostCustomerV1OrderCustomerSignInRequestObject) (viewsLUcustomer.PostCustomerV1OrderCustomerSignInResponseObject, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, viewsLUcustomer.PostCustomerV1OrderCustomerSignInRequestObject) viewsLUcustomer.PostCustomerV1OrderCustomerSignInResponseObject); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(viewsLUcustomer.PostCustomerV1OrderCustomerSignInResponseObject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, viewsLUcustomer.PostCustomerV1OrderCustomerSignInRequestObject) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StrictServerInterface_PostCustomerV1OrderCustomerSignIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostCustomerV1OrderCustomerSignIn'
type StrictServerInterface_PostCustomerV1OrderCustomerSignIn_Call struct {
	*mock.Call
}

// PostCustomerV1OrderCustomerSignIn is a helper method to define mock.On call
//   - ctx context.Context
//   - request viewsLUcustomer.PostCustomerV1OrderCustomerSignInRequestObject
func (_e *StrictServerInterface_Expecter) PostCustomerV1OrderCustomerSignIn(ctx interface{}, request interface{}) *StrictServerInterface_PostCustomerV1OrderCustomerSignIn_Call {
	return &StrictServerInterface_PostCustomerV1OrderCustomerSignIn_Call{Call: _e.mock.On("PostCustomerV1OrderCustomerSignIn", ctx, request)}
}

func (_c *StrictServerInterface_PostCustomerV1OrderCustomerSignIn_Call) Run(run func(ctx context.Context, request viewsLUcustomer.PostCustomerV1OrderCustomerSignInRequestObject)) *StrictServerInterface_PostCustomerV1OrderCustomerSignIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(viewsLUcustomer.PostCustomerV1OrderCustomerSignInRequestObject))
	})
	return _c
}

func (_c *StrictServerInterface_PostCustomerV1OrderCustomerSignIn_Call) Return(_a0 viewsLUcustomer.PostCustomerV1OrderCustomerSignInResponseObject, _a1 error) *StrictServerInterface_PostCustomerV1OrderCustomerSignIn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StrictServerInterface_PostCustomerV1OrderCustomerSignIn_Call) RunAndReturn(run func(context.Context, viewsLUcustomer.PostCustomerV1OrderCustomerSignInRequestObject) (viewsLUcustomer.PostCustomerV1OrderCustomerSignInResponseObject, error)) *StrictServerInterface_PostCustomerV1OrderCustomerSignIn_Call {
	_c.Call.Return(run)
	return _c
}

// PostCustomerV1OrderCustomerSignUp provides a mock function with given fields: ctx, request
func (_m *StrictServerInterface) PostCustomerV1OrderCustomerSignUp(ctx context.Context, request viewsLUcustomer.PostCustomerV1OrderCustomerSignUpRequestObject) (viewsLUcustomer.PostCustomerV1OrderCustomerSignUpResponseObject, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for PostCustomerV1OrderCustomerSignUp")
	}

	var r0 viewsLUcustomer.PostCustomerV1OrderCustomerSignUpResponseObject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, viewsLUcustomer.PostCustomerV1OrderCustomerSignUpRequestObject) (viewsLUcustomer.PostCustomerV1OrderCustomerSignUpResponseObject, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, viewsLUcustomer.PostCustomerV1OrderCustomerSignUpRequestObject) viewsLUcustomer.PostCustomerV1OrderCustomerSignUpResponseObject); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(viewsLUcustomer.PostCustomerV1OrderCustomerSignUpResponseObject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, viewsLUcustomer.PostCustomerV1OrderCustomerSignUpRequestObject) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StrictServerInterface_PostCustomerV1OrderCustomerSignUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostCustomerV1OrderCustomerSignUp'
type StrictServerInterface_PostCustomerV1OrderCustomerSignUp_Call struct {
	*mock.Call
}

// PostCustomerV1OrderCustomerSignUp is a helper method to define mock.On call
//   - ctx context.Context
//   - request viewsLUcustomer.PostCustomerV1OrderCustomerSignUpRequestObject
func (_e *StrictServerInterface_Expecter) PostCustomerV1OrderCustomerSignUp(ctx interface{}, request interface{}) *StrictServerInterface_PostCustomerV1OrderCustomerSignUp_Call {
	return &StrictServerInterface_PostCustomerV1OrderCustomerSignUp_Call{Call: _e.mock.On("PostCustomerV1OrderCustomerSignUp", ctx, request)}
}

func (_c *StrictServerInterface_PostCustomerV1OrderCustomerSignUp_Call) Run(run func(ctx context.Context, request viewsLUcustomer.PostCustomerV1OrderCustomerSignUpRequestObject)) *StrictServerInterface_PostCustomerV1OrderCustomerSignUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(viewsLUcustomer.PostCustomerV1OrderCustomerSignUpRequestObject))
	})
	return _c
}

func (_c *StrictServerInterface_PostCustomerV1OrderCustomerSignUp_Call) Return(_a0 viewsLUcustomer.PostCustomerV1OrderCustomerSignUpResponseObject, _a1 error) *StrictServerInterface_PostCustomerV1OrderCustomerSignUp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StrictServerInterface_PostCustomerV1OrderCustomerSignUp_Call) RunAndReturn(run func(context.Context, viewsLUcustomer.PostCustomerV1OrderCustomerSignUpRequestObject) (viewsLUcustomer.PostCustomerV1OrderCustomerSignUpResponseObject, error)) *StrictServerInterface_PostCustomerV1OrderCustomerSignUp_Call {
	_c.Call.Return(run)
	return _c
}

// NewStrictServerInterface creates a new instance of StrictServerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStrictServerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *StrictServerInterface {
	mock := &StrictServerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
