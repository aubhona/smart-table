// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	viewsLUadminUuser "github.com/smart-table/src/views/codegen/admin_user"
	mock "github.com/stretchr/testify/mock"
)

// StrictServerInterface is an autogenerated mock type for the StrictServerInterface type
type StrictServerInterface struct {
	mock.Mock
}

type StrictServerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *StrictServerInterface) EXPECT() *StrictServerInterface_Expecter {
	return &StrictServerInterface_Expecter{mock: &_m.Mock}
}

// PostAdminV1UserSignIn provides a mock function with given fields: ctx, request
func (_m *StrictServerInterface) PostAdminV1UserSignIn(ctx context.Context, request viewsLUadminUuser.PostAdminV1UserSignInRequestObject) (viewsLUadminUuser.PostAdminV1UserSignInResponseObject, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for PostAdminV1UserSignIn")
	}

	var r0 viewsLUadminUuser.PostAdminV1UserSignInResponseObject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, viewsLUadminUuser.PostAdminV1UserSignInRequestObject) (viewsLUadminUuser.PostAdminV1UserSignInResponseObject, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, viewsLUadminUuser.PostAdminV1UserSignInRequestObject) viewsLUadminUuser.PostAdminV1UserSignInResponseObject); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(viewsLUadminUuser.PostAdminV1UserSignInResponseObject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, viewsLUadminUuser.PostAdminV1UserSignInRequestObject) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StrictServerInterface_PostAdminV1UserSignIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostAdminV1UserSignIn'
type StrictServerInterface_PostAdminV1UserSignIn_Call struct {
	*mock.Call
}

// PostAdminV1UserSignIn is a helper method to define mock.On call
//   - ctx context.Context
//   - request viewsLUadminUuser.PostAdminV1UserSignInRequestObject
func (_e *StrictServerInterface_Expecter) PostAdminV1UserSignIn(ctx interface{}, request interface{}) *StrictServerInterface_PostAdminV1UserSignIn_Call {
	return &StrictServerInterface_PostAdminV1UserSignIn_Call{Call: _e.mock.On("PostAdminV1UserSignIn", ctx, request)}
}

func (_c *StrictServerInterface_PostAdminV1UserSignIn_Call) Run(run func(ctx context.Context, request viewsLUadminUuser.PostAdminV1UserSignInRequestObject)) *StrictServerInterface_PostAdminV1UserSignIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(viewsLUadminUuser.PostAdminV1UserSignInRequestObject))
	})
	return _c
}

func (_c *StrictServerInterface_PostAdminV1UserSignIn_Call) Return(_a0 viewsLUadminUuser.PostAdminV1UserSignInResponseObject, _a1 error) *StrictServerInterface_PostAdminV1UserSignIn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StrictServerInterface_PostAdminV1UserSignIn_Call) RunAndReturn(run func(context.Context, viewsLUadminUuser.PostAdminV1UserSignInRequestObject) (viewsLUadminUuser.PostAdminV1UserSignInResponseObject, error)) *StrictServerInterface_PostAdminV1UserSignIn_Call {
	_c.Call.Return(run)
	return _c
}

// PostAdminV1UserSignUp provides a mock function with given fields: ctx, request
func (_m *StrictServerInterface) PostAdminV1UserSignUp(ctx context.Context, request viewsLUadminUuser.PostAdminV1UserSignUpRequestObject) (viewsLUadminUuser.PostAdminV1UserSignUpResponseObject, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for PostAdminV1UserSignUp")
	}

	var r0 viewsLUadminUuser.PostAdminV1UserSignUpResponseObject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, viewsLUadminUuser.PostAdminV1UserSignUpRequestObject) (viewsLUadminUuser.PostAdminV1UserSignUpResponseObject, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, viewsLUadminUuser.PostAdminV1UserSignUpRequestObject) viewsLUadminUuser.PostAdminV1UserSignUpResponseObject); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(viewsLUadminUuser.PostAdminV1UserSignUpResponseObject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, viewsLUadminUuser.PostAdminV1UserSignUpRequestObject) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StrictServerInterface_PostAdminV1UserSignUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostAdminV1UserSignUp'
type StrictServerInterface_PostAdminV1UserSignUp_Call struct {
	*mock.Call
}

// PostAdminV1UserSignUp is a helper method to define mock.On call
//   - ctx context.Context
//   - request viewsLUadminUuser.PostAdminV1UserSignUpRequestObject
func (_e *StrictServerInterface_Expecter) PostAdminV1UserSignUp(ctx interface{}, request interface{}) *StrictServerInterface_PostAdminV1UserSignUp_Call {
	return &StrictServerInterface_PostAdminV1UserSignUp_Call{Call: _e.mock.On("PostAdminV1UserSignUp", ctx, request)}
}

func (_c *StrictServerInterface_PostAdminV1UserSignUp_Call) Run(run func(ctx context.Context, request viewsLUadminUuser.PostAdminV1UserSignUpRequestObject)) *StrictServerInterface_PostAdminV1UserSignUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(viewsLUadminUuser.PostAdminV1UserSignUpRequestObject))
	})
	return _c
}

func (_c *StrictServerInterface_PostAdminV1UserSignUp_Call) Return(_a0 viewsLUadminUuser.PostAdminV1UserSignUpResponseObject, _a1 error) *StrictServerInterface_PostAdminV1UserSignUp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StrictServerInterface_PostAdminV1UserSignUp_Call) RunAndReturn(run func(context.Context, viewsLUadminUuser.PostAdminV1UserSignUpRequestObject) (viewsLUadminUuser.PostAdminV1UserSignUpResponseObject, error)) *StrictServerInterface_PostAdminV1UserSignUp_Call {
	_c.Call.Return(run)
	return _c
}

// NewStrictServerInterface creates a new instance of StrictServerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStrictServerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *StrictServerInterface {
	mock := &StrictServerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
