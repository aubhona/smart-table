// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/smart-table/src/domains/admin/domain"
	mock "github.com/stretchr/testify/mock"

	utils "github.com/smart-table/src/utils"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function with given fields: ctx
func (_m *UserRepository) Begin(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type UserRepository_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UserRepository_Expecter) Begin(ctx interface{}) *UserRepository_Begin_Call {
	return &UserRepository_Begin_Call{Call: _e.mock.On("Begin", ctx)}
}

func (_c *UserRepository_Begin_Call) Run(run func(ctx context.Context)) *UserRepository_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UserRepository_Begin_Call) Return(_a0 error) *UserRepository_Begin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_Begin_Call) RunAndReturn(run func(context.Context) error) *UserRepository_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// CheckLoginOrTgLoginExist provides a mock function with given fields: ctx, userLogin, tgLogin
func (_m *UserRepository) CheckLoginOrTgLoginExist(ctx context.Context, userLogin string, tgLogin string) (bool, error) {
	ret := _m.Called(ctx, userLogin, tgLogin)

	if len(ret) == 0 {
		panic("no return value specified for CheckLoginOrTgLoginExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, userLogin, tgLogin)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, userLogin, tgLogin)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userLogin, tgLogin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_CheckLoginOrTgLoginExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckLoginOrTgLoginExist'
type UserRepository_CheckLoginOrTgLoginExist_Call struct {
	*mock.Call
}

// CheckLoginOrTgLoginExist is a helper method to define mock.On call
//   - ctx context.Context
//   - userLogin string
//   - tgLogin string
func (_e *UserRepository_Expecter) CheckLoginOrTgLoginExist(ctx interface{}, userLogin interface{}, tgLogin interface{}) *UserRepository_CheckLoginOrTgLoginExist_Call {
	return &UserRepository_CheckLoginOrTgLoginExist_Call{Call: _e.mock.On("CheckLoginOrTgLoginExist", ctx, userLogin, tgLogin)}
}

func (_c *UserRepository_CheckLoginOrTgLoginExist_Call) Run(run func(ctx context.Context, userLogin string, tgLogin string)) *UserRepository_CheckLoginOrTgLoginExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserRepository_CheckLoginOrTgLoginExist_Call) Return(_a0 bool, _a1 error) *UserRepository_CheckLoginOrTgLoginExist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_CheckLoginOrTgLoginExist_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *UserRepository_CheckLoginOrTgLoginExist_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields: ctx
func (_m *UserRepository) Commit(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type UserRepository_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UserRepository_Expecter) Commit(ctx interface{}) *UserRepository_Commit_Call {
	return &UserRepository_Commit_Call{Call: _e.mock.On("Commit", ctx)}
}

func (_c *UserRepository_Commit_Call) Run(run func(ctx context.Context)) *UserRepository_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UserRepository_Commit_Call) Return(_a0 error) *UserRepository_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_Commit_Call) RunAndReturn(run func(context.Context) error) *UserRepository_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// FindUser provides a mock function with given fields: ctx, userLogin
func (_m *UserRepository) FindUser(ctx context.Context, userLogin string) (utils.SharedRef[domain.User], error) {
	ret := _m.Called(ctx, userLogin)

	if len(ret) == 0 {
		panic("no return value specified for FindUser")
	}

	var r0 utils.SharedRef[domain.User]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (utils.SharedRef[domain.User], error)); ok {
		return rf(ctx, userLogin)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) utils.SharedRef[domain.User]); ok {
		r0 = rf(ctx, userLogin)
	} else {
		r0 = ret.Get(0).(utils.SharedRef[domain.User])
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userLogin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_FindUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUser'
type UserRepository_FindUser_Call struct {
	*mock.Call
}

// FindUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userLogin string
func (_e *UserRepository_Expecter) FindUser(ctx interface{}, userLogin interface{}) *UserRepository_FindUser_Call {
	return &UserRepository_FindUser_Call{Call: _e.mock.On("FindUser", ctx, userLogin)}
}

func (_c *UserRepository_FindUser_Call) Run(run func(ctx context.Context, userLogin string)) *UserRepository_FindUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepository_FindUser_Call) Return(_a0 utils.SharedRef[domain.User], _a1 error) *UserRepository_FindUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_FindUser_Call) RunAndReturn(run func(context.Context, string) (utils.SharedRef[domain.User], error)) *UserRepository_FindUser_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, user
func (_m *UserRepository) Save(ctx context.Context, user utils.SharedRef[domain.User]) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, utils.SharedRef[domain.User]) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type UserRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - user utils.SharedRef[domain.User]
func (_e *UserRepository_Expecter) Save(ctx interface{}, user interface{}) *UserRepository_Save_Call {
	return &UserRepository_Save_Call{Call: _e.mock.On("Save", ctx, user)}
}

func (_c *UserRepository_Save_Call) Run(run func(ctx context.Context, user utils.SharedRef[domain.User])) *UserRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(utils.SharedRef[domain.User]))
	})
	return _c
}

func (_c *UserRepository_Save_Call) Return(_a0 error) *UserRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_Save_Call) RunAndReturn(run func(context.Context, utils.SharedRef[domain.User]) error) *UserRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
