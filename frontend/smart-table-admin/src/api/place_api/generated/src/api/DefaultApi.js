/**
 * SmartTable Mobile API
 * API для управления плейсом.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdminV1PlaceCreateRequest from '../model/AdminV1PlaceCreateRequest';
import AdminV1PlaceCreateResponse from '../model/AdminV1PlaceCreateResponse';
import AdminV1PlaceListRequest from '../model/AdminV1PlaceListRequest';
import AdminV1PlaceListResponse from '../model/AdminV1PlaceListResponse';
import AdminV1StaffAddRequest from '../model/AdminV1StaffAddRequest';
import ErrorResponse from '../model/ErrorResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adminV1PlaceCreatePost operation.
     * @callback module:api/DefaultApi~adminV1PlaceCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminV1PlaceCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Создание плейса
     * Создание плейса
     * @param {String} userUUID Уникальный идентификатор пользователя
     * @param {String} jWTToken jwt токен пользователя
     * @param {module:model/AdminV1PlaceCreateRequest} adminV1PlaceCreateRequest 
     * @param {module:api/DefaultApi~adminV1PlaceCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminV1PlaceCreateResponse}
     */
    adminV1PlaceCreatePost(userUUID, jWTToken, adminV1PlaceCreateRequest, callback) {
      let postBody = adminV1PlaceCreateRequest;
      // verify the required parameter 'userUUID' is set
      if (userUUID === undefined || userUUID === null) {
        throw new Error("Missing the required parameter 'userUUID' when calling adminV1PlaceCreatePost");
      }
      // verify the required parameter 'jWTToken' is set
      if (jWTToken === undefined || jWTToken === null) {
        throw new Error("Missing the required parameter 'jWTToken' when calling adminV1PlaceCreatePost");
      }
      // verify the required parameter 'adminV1PlaceCreateRequest' is set
      if (adminV1PlaceCreateRequest === undefined || adminV1PlaceCreateRequest === null) {
        throw new Error("Missing the required parameter 'adminV1PlaceCreateRequest' when calling adminV1PlaceCreatePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-UUID': userUUID,
        'JWT-Token': jWTToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AdminV1PlaceCreateResponse;
      return this.apiClient.callApi(
        '/admin/v1/place/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminV1PlaceListPost operation.
     * @callback module:api/DefaultApi~adminV1PlaceListPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminV1PlaceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получение списка плейсов пользователя
     * Получение списка плейсов пользователя
     * @param {String} userUUID Уникальный идентификатор пользователя
     * @param {String} jWTToken jwt токен пользователя
     * @param {module:model/AdminV1PlaceListRequest} adminV1PlaceListRequest 
     * @param {module:api/DefaultApi~adminV1PlaceListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminV1PlaceListResponse}
     */
    adminV1PlaceListPost(userUUID, jWTToken, adminV1PlaceListRequest, callback) {
      let postBody = adminV1PlaceListRequest;
      // verify the required parameter 'userUUID' is set
      if (userUUID === undefined || userUUID === null) {
        throw new Error("Missing the required parameter 'userUUID' when calling adminV1PlaceListPost");
      }
      // verify the required parameter 'jWTToken' is set
      if (jWTToken === undefined || jWTToken === null) {
        throw new Error("Missing the required parameter 'jWTToken' when calling adminV1PlaceListPost");
      }
      // verify the required parameter 'adminV1PlaceListRequest' is set
      if (adminV1PlaceListRequest === undefined || adminV1PlaceListRequest === null) {
        throw new Error("Missing the required parameter 'adminV1PlaceListRequest' when calling adminV1PlaceListPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-UUID': userUUID,
        'JWT-Token': jWTToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AdminV1PlaceListResponse;
      return this.apiClient.callApi(
        '/admin/v1/place/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminV1PlaceStaffAddPost operation.
     * @callback module:api/DefaultApi~adminV1PlaceStaffAddPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Добавление сотрудника в плейс
     * Добавление сотрудника в плейс
     * @param {String} userUUID Уникальный идентификатор пользователя
     * @param {String} jWTToken jwt токен пользователя
     * @param {module:model/AdminV1StaffAddRequest} adminV1StaffAddRequest 
     * @param {module:api/DefaultApi~adminV1PlaceStaffAddPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminV1PlaceStaffAddPost(userUUID, jWTToken, adminV1StaffAddRequest, callback) {
      let postBody = adminV1StaffAddRequest;
      // verify the required parameter 'userUUID' is set
      if (userUUID === undefined || userUUID === null) {
        throw new Error("Missing the required parameter 'userUUID' when calling adminV1PlaceStaffAddPost");
      }
      // verify the required parameter 'jWTToken' is set
      if (jWTToken === undefined || jWTToken === null) {
        throw new Error("Missing the required parameter 'jWTToken' when calling adminV1PlaceStaffAddPost");
      }
      // verify the required parameter 'adminV1StaffAddRequest' is set
      if (adminV1StaffAddRequest === undefined || adminV1StaffAddRequest === null) {
        throw new Error("Missing the required parameter 'adminV1StaffAddRequest' when calling adminV1PlaceStaffAddPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-UUID': userUUID,
        'JWT-Token': jWTToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/v1/place/staff/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
