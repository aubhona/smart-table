/**
 * SmartTable Admin API
 * API для управления плейсом.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MenuDishInfo model module.
 * @module model/MenuDishInfo
 * @version 1.0.0
 */
class MenuDishInfo {
    /**
     * Constructs a new <code>MenuDishInfo</code>.
     * @alias module:model/MenuDishInfo
     * @param id {String} 
     * @param name {String} 
     * @param description {String} 
     * @param calories {Number} 
     * @param weight {Number} 
     * @param category {String} 
     * @param pictureKey {String} 
     * @param price {String} 
     * @param exist {Boolean} 
     */
    constructor(id, name, description, calories, weight, category, pictureKey, price, exist) { 
        
        MenuDishInfo.initialize(this, id, name, description, calories, weight, category, pictureKey, price, exist);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, description, calories, weight, category, pictureKey, price, exist) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['description'] = description;
        obj['calories'] = calories;
        obj['weight'] = weight;
        obj['category'] = category;
        obj['picture_key'] = pictureKey;
        obj['price'] = price;
        obj['exist'] = exist;
    }

    /**
     * Constructs a <code>MenuDishInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MenuDishInfo} obj Optional instance to populate.
     * @return {module:model/MenuDishInfo} The populated <code>MenuDishInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MenuDishInfo();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('calories')) {
                obj['calories'] = ApiClient.convertToType(data['calories'], 'Number');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('picture_key')) {
                obj['picture_key'] = ApiClient.convertToType(data['picture_key'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'String');
            }
            if (data.hasOwnProperty('exist')) {
                obj['exist'] = ApiClient.convertToType(data['exist'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MenuDishInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MenuDishInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MenuDishInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['picture_key'] && !(typeof data['picture_key'] === 'string' || data['picture_key'] instanceof String)) {
            throw new Error("Expected the field `picture_key` to be a primitive type in the JSON string but got " + data['picture_key']);
        }
        // ensure the json data is a string
        if (data['price'] && !(typeof data['price'] === 'string' || data['price'] instanceof String)) {
            throw new Error("Expected the field `price` to be a primitive type in the JSON string but got " + data['price']);
        }

        return true;
    }


}

MenuDishInfo.RequiredProperties = ["id", "name", "description", "calories", "weight", "category", "picture_key", "price", "exist"];

/**
 * @member {String} id
 */
MenuDishInfo.prototype['id'] = undefined;

/**
 * @member {String} name
 */
MenuDishInfo.prototype['name'] = undefined;

/**
 * @member {String} description
 */
MenuDishInfo.prototype['description'] = undefined;

/**
 * @member {Number} calories
 */
MenuDishInfo.prototype['calories'] = undefined;

/**
 * @member {Number} weight
 */
MenuDishInfo.prototype['weight'] = undefined;

/**
 * @member {String} category
 */
MenuDishInfo.prototype['category'] = undefined;

/**
 * @member {String} picture_key
 */
MenuDishInfo.prototype['picture_key'] = undefined;

/**
 * @member {String} price
 */
MenuDishInfo.prototype['price'] = undefined;

/**
 * @member {Boolean} exist
 */
MenuDishInfo.prototype['exist'] = undefined;






export default MenuDishInfo;

