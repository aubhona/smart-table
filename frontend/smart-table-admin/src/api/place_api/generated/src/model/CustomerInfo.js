/**
 * SmartTable Admin API
 * API для управления плейсом.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ItemInfo from './ItemInfo';

/**
 * The CustomerInfo model module.
 * @module model/CustomerInfo
 * @version 1.0.0
 */
class CustomerInfo {
    /**
     * Constructs a new <code>CustomerInfo</code>.
     * @alias module:model/CustomerInfo
     * @param uuid {String} Уникальный идентификатор пользователя
     * @param tgLogin {String} Логин пользователя, используемый для входа
     * @param tgId {String} 
     * @param itemList {Array.<module:model/ItemInfo>} Список позиций в заказе пользователя
     */
    constructor(uuid, tgLogin, tgId, itemList) { 
        
        CustomerInfo.initialize(this, uuid, tgLogin, tgId, itemList);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, uuid, tgLogin, tgId, itemList) { 
        obj['uuid'] = uuid;
        obj['tg_login'] = tgLogin;
        obj['tg_id'] = tgId;
        obj['item_list'] = itemList;
    }

    /**
     * Constructs a <code>CustomerInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomerInfo} obj Optional instance to populate.
     * @return {module:model/CustomerInfo} The populated <code>CustomerInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomerInfo();

            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('tg_login')) {
                obj['tg_login'] = ApiClient.convertToType(data['tg_login'], 'String');
            }
            if (data.hasOwnProperty('tg_id')) {
                obj['tg_id'] = ApiClient.convertToType(data['tg_id'], 'String');
            }
            if (data.hasOwnProperty('item_list')) {
                obj['item_list'] = ApiClient.convertToType(data['item_list'], [ItemInfo]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomerInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomerInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CustomerInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }
        // ensure the json data is a string
        if (data['tg_login'] && !(typeof data['tg_login'] === 'string' || data['tg_login'] instanceof String)) {
            throw new Error("Expected the field `tg_login` to be a primitive type in the JSON string but got " + data['tg_login']);
        }
        // ensure the json data is a string
        if (data['tg_id'] && !(typeof data['tg_id'] === 'string' || data['tg_id'] instanceof String)) {
            throw new Error("Expected the field `tg_id` to be a primitive type in the JSON string but got " + data['tg_id']);
        }
        if (data['item_list']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['item_list'])) {
                throw new Error("Expected the field `item_list` to be an array in the JSON data but got " + data['item_list']);
            }
            // validate the optional field `item_list` (array)
            for (const item of data['item_list']) {
                ItemInfo.validateJSON(item);
            };
        }

        return true;
    }


}

CustomerInfo.RequiredProperties = ["uuid", "tg_login", "tg_id", "item_list"];

/**
 * Уникальный идентификатор пользователя
 * @member {String} uuid
 */
CustomerInfo.prototype['uuid'] = undefined;

/**
 * Логин пользователя, используемый для входа
 * @member {String} tg_login
 */
CustomerInfo.prototype['tg_login'] = undefined;

/**
 * @member {String} tg_id
 */
CustomerInfo.prototype['tg_id'] = undefined;

/**
 * Список позиций в заказе пользователя
 * @member {Array.<module:model/ItemInfo>} item_list
 */
CustomerInfo.prototype['item_list'] = undefined;






export default CustomerInfo;

