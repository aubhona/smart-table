/**
 * SmartTable Admin API
 * API для управления плейсом.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Role from './Role';

/**
 * The EmployeeInfo model module.
 * @module model/EmployeeInfo
 * @version 1.0.0
 */
class EmployeeInfo {
    /**
     * Constructs a new <code>EmployeeInfo</code>.
     * @alias module:model/EmployeeInfo
     * @param uuid {String} Уникальный идентификатор пользователя
     * @param login {String} Логин пользователя, используемый для входа
     * @param tgLogin {String} Логин пользователя, используемый для входа
     * @param firstName {String} 
     * @param lastName {String} 
     * @param employeeRole {module:model/Role} 
     */
    constructor(uuid, login, tgLogin, firstName, lastName, employeeRole) { 
        
        EmployeeInfo.initialize(this, uuid, login, tgLogin, firstName, lastName, employeeRole);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, uuid, login, tgLogin, firstName, lastName, employeeRole) { 
        obj['uuid'] = uuid;
        obj['login'] = login;
        obj['tg_login'] = tgLogin;
        obj['first_name'] = firstName;
        obj['last_name'] = lastName;
        obj['employee_role'] = employeeRole;
    }

    /**
     * Constructs a <code>EmployeeInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EmployeeInfo} obj Optional instance to populate.
     * @return {module:model/EmployeeInfo} The populated <code>EmployeeInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EmployeeInfo();

            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('login')) {
                obj['login'] = ApiClient.convertToType(data['login'], 'String');
            }
            if (data.hasOwnProperty('tg_login')) {
                obj['tg_login'] = ApiClient.convertToType(data['tg_login'], 'String');
            }
            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
            }
            if (data.hasOwnProperty('employee_role')) {
                obj['employee_role'] = Role.constructFromObject(data['employee_role']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EmployeeInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EmployeeInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EmployeeInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }
        // ensure the json data is a string
        if (data['login'] && !(typeof data['login'] === 'string' || data['login'] instanceof String)) {
            throw new Error("Expected the field `login` to be a primitive type in the JSON string but got " + data['login']);
        }
        // ensure the json data is a string
        if (data['tg_login'] && !(typeof data['tg_login'] === 'string' || data['tg_login'] instanceof String)) {
            throw new Error("Expected the field `tg_login` to be a primitive type in the JSON string but got " + data['tg_login']);
        }
        // ensure the json data is a string
        if (data['first_name'] && !(typeof data['first_name'] === 'string' || data['first_name'] instanceof String)) {
            throw new Error("Expected the field `first_name` to be a primitive type in the JSON string but got " + data['first_name']);
        }
        // ensure the json data is a string
        if (data['last_name'] && !(typeof data['last_name'] === 'string' || data['last_name'] instanceof String)) {
            throw new Error("Expected the field `last_name` to be a primitive type in the JSON string but got " + data['last_name']);
        }

        return true;
    }


}

EmployeeInfo.RequiredProperties = ["uuid", "login", "tg_login", "first_name", "last_name", "employee_role"];

/**
 * Уникальный идентификатор пользователя
 * @member {String} uuid
 */
EmployeeInfo.prototype['uuid'] = undefined;

/**
 * Логин пользователя, используемый для входа
 * @member {String} login
 */
EmployeeInfo.prototype['login'] = undefined;

/**
 * Логин пользователя, используемый для входа
 * @member {String} tg_login
 */
EmployeeInfo.prototype['tg_login'] = undefined;

/**
 * @member {String} first_name
 */
EmployeeInfo.prototype['first_name'] = undefined;

/**
 * @member {String} last_name
 */
EmployeeInfo.prototype['last_name'] = undefined;

/**
 * @member {module:model/Role} employee_role
 */
EmployeeInfo.prototype['employee_role'] = undefined;






export default EmployeeInfo;

