/**
 * SmartTable Admin API
 * API для управления плейсом.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ItemResolution from './ItemResolution';
import ItemStatus from './ItemStatus';

/**
 * The ItemInfo model module.
 * @module model/ItemInfo
 * @version 1.0.0
 */
class ItemInfo {
    /**
     * Constructs a new <code>ItemInfo</code>.
     * @alias module:model/ItemInfo
     * @param itemUuid {String} Идентификатор позиции в заказе
     * @param comment {String} 
     * @param status {module:model/ItemStatus} 
     * @param name {String} 
     * @param price {String} 
     * @param count {Number} 
     */
    constructor(itemUuid, comment, status, name, price, count) { 
        
        ItemInfo.initialize(this, itemUuid, comment, status, name, price, count);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, itemUuid, comment, status, name, price, count) { 
        obj['item_uuid'] = itemUuid;
        obj['comment'] = comment;
        obj['status'] = status;
        obj['name'] = name;
        obj['price'] = price;
        obj['count'] = count;
    }

    /**
     * Constructs a <code>ItemInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemInfo} obj Optional instance to populate.
     * @return {module:model/ItemInfo} The populated <code>ItemInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemInfo();

            if (data.hasOwnProperty('item_uuid')) {
                obj['item_uuid'] = ApiClient.convertToType(data['item_uuid'], 'String');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ItemStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('resolution')) {
                obj['resolution'] = ItemResolution.constructFromObject(data['resolution']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'String');
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItemInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItemInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ItemInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['item_uuid'] && !(typeof data['item_uuid'] === 'string' || data['item_uuid'] instanceof String)) {
            throw new Error("Expected the field `item_uuid` to be a primitive type in the JSON string but got " + data['item_uuid']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['price'] && !(typeof data['price'] === 'string' || data['price'] instanceof String)) {
            throw new Error("Expected the field `price` to be a primitive type in the JSON string but got " + data['price']);
        }

        return true;
    }


}

ItemInfo.RequiredProperties = ["item_uuid", "comment", "status", "name", "price", "count"];

/**
 * Идентификатор позиции в заказе
 * @member {String} item_uuid
 */
ItemInfo.prototype['item_uuid'] = undefined;

/**
 * @member {String} comment
 */
ItemInfo.prototype['comment'] = undefined;

/**
 * @member {module:model/ItemStatus} status
 */
ItemInfo.prototype['status'] = undefined;

/**
 * @member {module:model/ItemResolution} resolution
 */
ItemInfo.prototype['resolution'] = undefined;

/**
 * @member {String} name
 */
ItemInfo.prototype['name'] = undefined;

/**
 * @member {String} price
 */
ItemInfo.prototype['price'] = undefined;

/**
 * @member {Number} count
 */
ItemInfo.prototype['count'] = undefined;






export default ItemInfo;

