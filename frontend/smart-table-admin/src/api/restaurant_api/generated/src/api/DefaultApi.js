/**
 * SmartTable Mobile API
 * API для управления рестораном.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdminV1RestaurantCreateRequest from '../model/AdminV1RestaurantCreateRequest';
import AdminV1RestaurantCreateResponse from '../model/AdminV1RestaurantCreateResponse';
import AdminV1RestaurantDishCreateResponse from '../model/AdminV1RestaurantDishCreateResponse';
import AdminV1RestaurantListResponse from '../model/AdminV1RestaurantListResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adminV1RestaurantCreatePost operation.
     * @callback module:api/DefaultApi~adminV1RestaurantCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminV1RestaurantCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Создание ресторана
     * Создание ресторана
     * @param {String} userUUID Уникальный идентификатор пользователя
     * @param {String} jWTToken jwt токен пользователя
     * @param {module:model/AdminV1RestaurantCreateRequest} adminV1RestaurantCreateRequest 
     * @param {module:api/DefaultApi~adminV1RestaurantCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminV1RestaurantCreateResponse}
     */
    adminV1RestaurantCreatePost(userUUID, jWTToken, adminV1RestaurantCreateRequest, callback) {
      let postBody = adminV1RestaurantCreateRequest;
      // verify the required parameter 'userUUID' is set
      if (userUUID === undefined || userUUID === null) {
        throw new Error("Missing the required parameter 'userUUID' when calling adminV1RestaurantCreatePost");
      }
      // verify the required parameter 'jWTToken' is set
      if (jWTToken === undefined || jWTToken === null) {
        throw new Error("Missing the required parameter 'jWTToken' when calling adminV1RestaurantCreatePost");
      }
      // verify the required parameter 'adminV1RestaurantCreateRequest' is set
      if (adminV1RestaurantCreateRequest === undefined || adminV1RestaurantCreateRequest === null) {
        throw new Error("Missing the required parameter 'adminV1RestaurantCreateRequest' when calling adminV1RestaurantCreatePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-UUID': userUUID,
        'JWT-Token': jWTToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AdminV1RestaurantCreateResponse;
      return this.apiClient.callApi(
        '/admin/v1/restaurant/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminV1RestaurantDishCreatePost operation.
     * @callback module:api/DefaultApi~adminV1RestaurantDishCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminV1RestaurantDishCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Создание блюда ресторана
     * Создание блюда ресторана
     * @param {String} userUUID Уникальный идентификатор пользователя
     * @param {String} jWTToken jwt токен пользователя
     * @param {String} restaurantUuid Уникальный идентификатор ресторана
     * @param {String} dishName 
     * @param {String} description 
     * @param {String} category 
     * @param {Number} calories 
     * @param {Number} weight 
     * @param {File} dishPictureFile 
     * @param {module:api/DefaultApi~adminV1RestaurantDishCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminV1RestaurantDishCreateResponse}
     */
    adminV1RestaurantDishCreatePost(userUUID, jWTToken, restaurantUuid, dishName, description, category, calories, weight, dishPictureFile, callback) {
      let postBody = null;
      // verify the required parameter 'userUUID' is set
      if (userUUID === undefined || userUUID === null) {
        throw new Error("Missing the required parameter 'userUUID' when calling adminV1RestaurantDishCreatePost");
      }
      // verify the required parameter 'jWTToken' is set
      if (jWTToken === undefined || jWTToken === null) {
        throw new Error("Missing the required parameter 'jWTToken' when calling adminV1RestaurantDishCreatePost");
      }
      // verify the required parameter 'restaurantUuid' is set
      if (restaurantUuid === undefined || restaurantUuid === null) {
        throw new Error("Missing the required parameter 'restaurantUuid' when calling adminV1RestaurantDishCreatePost");
      }
      // verify the required parameter 'dishName' is set
      if (dishName === undefined || dishName === null) {
        throw new Error("Missing the required parameter 'dishName' when calling adminV1RestaurantDishCreatePost");
      }
      // verify the required parameter 'description' is set
      if (description === undefined || description === null) {
        throw new Error("Missing the required parameter 'description' when calling adminV1RestaurantDishCreatePost");
      }
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling adminV1RestaurantDishCreatePost");
      }
      // verify the required parameter 'calories' is set
      if (calories === undefined || calories === null) {
        throw new Error("Missing the required parameter 'calories' when calling adminV1RestaurantDishCreatePost");
      }
      // verify the required parameter 'weight' is set
      if (weight === undefined || weight === null) {
        throw new Error("Missing the required parameter 'weight' when calling adminV1RestaurantDishCreatePost");
      }
      // verify the required parameter 'dishPictureFile' is set
      if (dishPictureFile === undefined || dishPictureFile === null) {
        throw new Error("Missing the required parameter 'dishPictureFile' when calling adminV1RestaurantDishCreatePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-UUID': userUUID,
        'JWT-Token': jWTToken
      };
      let formParams = {
        'restaurant_uuid': restaurantUuid,
        'dish_name': dishName,
        'description': description,
        'category': category,
        'calories': calories,
        'weight': weight,
        'dish_picture_file': dishPictureFile
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AdminV1RestaurantDishCreateResponse;
      return this.apiClient.callApi(
        '/admin/v1/restaurant/dish/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminV1RestaurantListGet operation.
     * @callback module:api/DefaultApi~adminV1RestaurantListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminV1RestaurantListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получение списка ресторанов пользователя
     * Получение списка ресторанов пользователя
     * @param {String} userUUID Уникальный идентификатор пользователя
     * @param {String} jWTToken jwt токен пользователя
     * @param {module:api/DefaultApi~adminV1RestaurantListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminV1RestaurantListResponse}
     */
    adminV1RestaurantListGet(userUUID, jWTToken, callback) {
      let postBody = null;
      // verify the required parameter 'userUUID' is set
      if (userUUID === undefined || userUUID === null) {
        throw new Error("Missing the required parameter 'userUUID' when calling adminV1RestaurantListGet");
      }
      // verify the required parameter 'jWTToken' is set
      if (jWTToken === undefined || jWTToken === null) {
        throw new Error("Missing the required parameter 'jWTToken' when calling adminV1RestaurantListGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-UUID': userUUID,
        'JWT-Token': jWTToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdminV1RestaurantListResponse;
      return this.apiClient.callApi(
        '/admin/v1/restaurant/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
