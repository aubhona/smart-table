/**
 * SmartTable Mobile API
 * API для управления заказами.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CustomerV1OrderCatalogUpdatedInfoResponse from '../model/CustomerV1OrderCatalogUpdatedInfoResponse';
import CustomerV1OrderCreateRequest from '../model/CustomerV1OrderCreateRequest';
import CustomerV1OrderCreateResponse from '../model/CustomerV1OrderCreateResponse';
import CustomerV1OrderCustomerListResponse from '../model/CustomerV1OrderCustomerListResponse';
import CustomerV1OrderItemsDraftCountEditRequest from '../model/CustomerV1OrderItemsDraftCountEditRequest';
import CustomerV1OrderItemsStateRequest from '../model/CustomerV1OrderItemsStateRequest';
import ErrorResponse from '../model/ErrorResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the customerV1OrderCartGet operation.
     * @callback module:api/DefaultApi~customerV1OrderCartGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить корзину
     * Возвращает подробную информацию по текущей корзине пользователя в заказе
     * @param {String} customerUUID Уникальный идентификатор пользователя
     * @param {String} jWTToken jwt токен пользователя
     * @param {String} orderUUID Уникальный идентификатор заказа
     * @param {module:api/DefaultApi~customerV1OrderCartGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    customerV1OrderCartGet(customerUUID, jWTToken, orderUUID, callback) {
      let postBody = null;
      // verify the required parameter 'customerUUID' is set
      if (customerUUID === undefined || customerUUID === null) {
        throw new Error("Missing the required parameter 'customerUUID' when calling customerV1OrderCartGet");
      }
      // verify the required parameter 'jWTToken' is set
      if (jWTToken === undefined || jWTToken === null) {
        throw new Error("Missing the required parameter 'jWTToken' when calling customerV1OrderCartGet");
      }
      // verify the required parameter 'orderUUID' is set
      if (orderUUID === undefined || orderUUID === null) {
        throw new Error("Missing the required parameter 'orderUUID' when calling customerV1OrderCartGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Customer-UUID': customerUUID,
        'JWT-Token': jWTToken,
        'Order-UUID': orderUUID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['multipart/mixed', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/customer/v1/order/cart', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerV1OrderCatalogGet operation.
     * @callback module:api/DefaultApi~customerV1OrderCatalogGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получение каталога
     * Отображение каталога плейса
     * @param {String} customerUUID Уникальный идентификатор пользователя
     * @param {String} jWTToken jwt токен пользователя
     * @param {String} orderUUID Уникальный идентификатор заказа
     * @param {module:api/DefaultApi~customerV1OrderCatalogGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    customerV1OrderCatalogGet(customerUUID, jWTToken, orderUUID, callback) {
      let postBody = null;
      // verify the required parameter 'customerUUID' is set
      if (customerUUID === undefined || customerUUID === null) {
        throw new Error("Missing the required parameter 'customerUUID' when calling customerV1OrderCatalogGet");
      }
      // verify the required parameter 'jWTToken' is set
      if (jWTToken === undefined || jWTToken === null) {
        throw new Error("Missing the required parameter 'jWTToken' when calling customerV1OrderCatalogGet");
      }
      // verify the required parameter 'orderUUID' is set
      if (orderUUID === undefined || orderUUID === null) {
        throw new Error("Missing the required parameter 'orderUUID' when calling customerV1OrderCatalogGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Customer-UUID': customerUUID,
        'JWT-Token': jWTToken,
        'Order-UUID': orderUUID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['multipart/mixed', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/customer/v1/order/catalog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerV1OrderCatalogUpdatedInfoGet operation.
     * @callback module:api/DefaultApi~customerV1OrderCatalogUpdatedInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerV1OrderCatalogUpdatedInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить обновленную информацию по каталогу
     * Возвращает обновленную стоимость корзины, и количество блюд из меню, которые добавлены в корзину
     * @param {String} customerUUID Уникальный идентификатор пользователя
     * @param {String} jWTToken jwt токен пользователя
     * @param {String} orderUUID Уникальный идентификатор заказа
     * @param {module:api/DefaultApi~customerV1OrderCatalogUpdatedInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerV1OrderCatalogUpdatedInfoResponse}
     */
    customerV1OrderCatalogUpdatedInfoGet(customerUUID, jWTToken, orderUUID, callback) {
      let postBody = null;
      // verify the required parameter 'customerUUID' is set
      if (customerUUID === undefined || customerUUID === null) {
        throw new Error("Missing the required parameter 'customerUUID' when calling customerV1OrderCatalogUpdatedInfoGet");
      }
      // verify the required parameter 'jWTToken' is set
      if (jWTToken === undefined || jWTToken === null) {
        throw new Error("Missing the required parameter 'jWTToken' when calling customerV1OrderCatalogUpdatedInfoGet");
      }
      // verify the required parameter 'orderUUID' is set
      if (orderUUID === undefined || orderUUID === null) {
        throw new Error("Missing the required parameter 'orderUUID' when calling customerV1OrderCatalogUpdatedInfoGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Customer-UUID': customerUUID,
        'JWT-Token': jWTToken,
        'Order-UUID': orderUUID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerV1OrderCatalogUpdatedInfoResponse;
      return this.apiClient.callApi(
        '/customer/v1/order/catalog/updated-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerV1OrderCreatePost operation.
     * @callback module:api/DefaultApi~customerV1OrderCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerV1OrderCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Создаёт новый заказ
     * Создание заказа, если первый пользователь в группе, иначе присоединение к заказу.
     * @param {String} customerUUID Уникальный идентификатор пользователя
     * @param {String} jWTToken jwt токен пользователя
     * @param {module:model/CustomerV1OrderCreateRequest} customerV1OrderCreateRequest 
     * @param {module:api/DefaultApi~customerV1OrderCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerV1OrderCreateResponse}
     */
    customerV1OrderCreatePost(customerUUID, jWTToken, customerV1OrderCreateRequest, callback) {
      let postBody = customerV1OrderCreateRequest;
      // verify the required parameter 'customerUUID' is set
      if (customerUUID === undefined || customerUUID === null) {
        throw new Error("Missing the required parameter 'customerUUID' when calling customerV1OrderCreatePost");
      }
      // verify the required parameter 'jWTToken' is set
      if (jWTToken === undefined || jWTToken === null) {
        throw new Error("Missing the required parameter 'jWTToken' when calling customerV1OrderCreatePost");
      }
      // verify the required parameter 'customerV1OrderCreateRequest' is set
      if (customerV1OrderCreateRequest === undefined || customerV1OrderCreateRequest === null) {
        throw new Error("Missing the required parameter 'customerV1OrderCreateRequest' when calling customerV1OrderCreatePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Customer-UUID': customerUUID,
        'JWT-Token': jWTToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomerV1OrderCreateResponse;
      return this.apiClient.callApi(
        '/customer/v1/order/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerV1OrderCustomerListGet operation.
     * @callback module:api/DefaultApi~customerV1OrderCustomerListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerV1OrderCustomerListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получение списка пользователей заказа
     * Получение списка пользователей заказа
     * @param {String} customerUUID Уникальный идентификатор пользователя
     * @param {String} jWTToken jwt токен пользователя
     * @param {String} orderUUID Уникальный идентификатор заказа
     * @param {module:api/DefaultApi~customerV1OrderCustomerListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerV1OrderCustomerListResponse}
     */
    customerV1OrderCustomerListGet(customerUUID, jWTToken, orderUUID, callback) {
      let postBody = null;
      // verify the required parameter 'customerUUID' is set
      if (customerUUID === undefined || customerUUID === null) {
        throw new Error("Missing the required parameter 'customerUUID' when calling customerV1OrderCustomerListGet");
      }
      // verify the required parameter 'jWTToken' is set
      if (jWTToken === undefined || jWTToken === null) {
        throw new Error("Missing the required parameter 'jWTToken' when calling customerV1OrderCustomerListGet");
      }
      // verify the required parameter 'orderUUID' is set
      if (orderUUID === undefined || orderUUID === null) {
        throw new Error("Missing the required parameter 'orderUUID' when calling customerV1OrderCustomerListGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Customer-UUID': customerUUID,
        'JWT-Token': jWTToken,
        'Order-UUID': orderUUID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerV1OrderCustomerListResponse;
      return this.apiClient.callApi(
        '/customer/v1/order/customer/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerV1OrderFinishPost operation.
     * @callback module:api/DefaultApi~customerV1OrderFinishPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Запрос на завершение заказа
     * Переводит заказ в статус ожидает оплаты
     * @param {String} customerUUID Уникальный идентификатор пользователя
     * @param {String} jWTToken jwt токен пользователя
     * @param {String} orderUUID Уникальный идентификатор заказа
     * @param {module:api/DefaultApi~customerV1OrderFinishPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    customerV1OrderFinishPost(customerUUID, jWTToken, orderUUID, callback) {
      let postBody = null;
      // verify the required parameter 'customerUUID' is set
      if (customerUUID === undefined || customerUUID === null) {
        throw new Error("Missing the required parameter 'customerUUID' when calling customerV1OrderFinishPost");
      }
      // verify the required parameter 'jWTToken' is set
      if (jWTToken === undefined || jWTToken === null) {
        throw new Error("Missing the required parameter 'jWTToken' when calling customerV1OrderFinishPost");
      }
      // verify the required parameter 'orderUUID' is set
      if (orderUUID === undefined || orderUUID === null) {
        throw new Error("Missing the required parameter 'orderUUID' when calling customerV1OrderFinishPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Customer-UUID': customerUUID,
        'JWT-Token': jWTToken,
        'Order-UUID': orderUUID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/customer/v1/order/finish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerV1OrderItemStatePost operation.
     * @callback module:api/DefaultApi~customerV1OrderItemStatePostCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить карточку блюда
     * Возвращает подробную информацию по выбранному блюду
     * @param {String} customerUUID Уникальный идентификатор пользователя
     * @param {String} jWTToken jwt токен пользователя
     * @param {String} orderUUID Уникальный идентификатор заказа
     * @param {module:model/CustomerV1OrderItemsStateRequest} customerV1OrderItemsStateRequest 
     * @param {module:api/DefaultApi~customerV1OrderItemStatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    customerV1OrderItemStatePost(customerUUID, jWTToken, orderUUID, customerV1OrderItemsStateRequest, callback) {
      let postBody = customerV1OrderItemsStateRequest;
      // verify the required parameter 'customerUUID' is set
      if (customerUUID === undefined || customerUUID === null) {
        throw new Error("Missing the required parameter 'customerUUID' when calling customerV1OrderItemStatePost");
      }
      // verify the required parameter 'jWTToken' is set
      if (jWTToken === undefined || jWTToken === null) {
        throw new Error("Missing the required parameter 'jWTToken' when calling customerV1OrderItemStatePost");
      }
      // verify the required parameter 'orderUUID' is set
      if (orderUUID === undefined || orderUUID === null) {
        throw new Error("Missing the required parameter 'orderUUID' when calling customerV1OrderItemStatePost");
      }
      // verify the required parameter 'customerV1OrderItemsStateRequest' is set
      if (customerV1OrderItemsStateRequest === undefined || customerV1OrderItemsStateRequest === null) {
        throw new Error("Missing the required parameter 'customerV1OrderItemsStateRequest' when calling customerV1OrderItemStatePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Customer-UUID': customerUUID,
        'JWT-Token': jWTToken,
        'Order-UUID': orderUUID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['multipart/mixed', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/customer/v1/order/item/state', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerV1OrderItemsCommitPost operation.
     * @callback module:api/DefaultApi~customerV1OrderItemsCommitPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Добавить блюда к чеку
     * Добавляет блюда из корзины в чек текущего заказа
     * @param {String} customerUUID Уникальный идентификатор пользователя
     * @param {String} jWTToken jwt токен пользователя
     * @param {String} orderUUID Уникальный идентификатор заказа
     * @param {module:api/DefaultApi~customerV1OrderItemsCommitPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    customerV1OrderItemsCommitPost(customerUUID, jWTToken, orderUUID, callback) {
      let postBody = null;
      // verify the required parameter 'customerUUID' is set
      if (customerUUID === undefined || customerUUID === null) {
        throw new Error("Missing the required parameter 'customerUUID' when calling customerV1OrderItemsCommitPost");
      }
      // verify the required parameter 'jWTToken' is set
      if (jWTToken === undefined || jWTToken === null) {
        throw new Error("Missing the required parameter 'jWTToken' when calling customerV1OrderItemsCommitPost");
      }
      // verify the required parameter 'orderUUID' is set
      if (orderUUID === undefined || orderUUID === null) {
        throw new Error("Missing the required parameter 'orderUUID' when calling customerV1OrderItemsCommitPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Customer-UUID': customerUUID,
        'JWT-Token': jWTToken,
        'Order-UUID': orderUUID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/customer/v1/order/items/commit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerV1OrderItemsDraftCountEditPost operation.
     * @callback module:api/DefaultApi~customerV1OrderItemsDraftCountEditPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Изменяет количество блюд в корзине.
     * Изменяет количество блюд в корзине. Передается число в запросе. Знак числа определяет добавить или удалить блюда.s 
     * @param {String} customerUUID Уникальный идентификатор пользователя
     * @param {String} jWTToken jwt токен пользователя
     * @param {String} orderUUID Уникальный идентификатор заказа
     * @param {module:model/CustomerV1OrderItemsDraftCountEditRequest} customerV1OrderItemsDraftCountEditRequest 
     * @param {module:api/DefaultApi~customerV1OrderItemsDraftCountEditPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    customerV1OrderItemsDraftCountEditPost(customerUUID, jWTToken, orderUUID, customerV1OrderItemsDraftCountEditRequest, callback) {
      let postBody = customerV1OrderItemsDraftCountEditRequest;
      // verify the required parameter 'customerUUID' is set
      if (customerUUID === undefined || customerUUID === null) {
        throw new Error("Missing the required parameter 'customerUUID' when calling customerV1OrderItemsDraftCountEditPost");
      }
      // verify the required parameter 'jWTToken' is set
      if (jWTToken === undefined || jWTToken === null) {
        throw new Error("Missing the required parameter 'jWTToken' when calling customerV1OrderItemsDraftCountEditPost");
      }
      // verify the required parameter 'orderUUID' is set
      if (orderUUID === undefined || orderUUID === null) {
        throw new Error("Missing the required parameter 'orderUUID' when calling customerV1OrderItemsDraftCountEditPost");
      }
      // verify the required parameter 'customerV1OrderItemsDraftCountEditRequest' is set
      if (customerV1OrderItemsDraftCountEditRequest === undefined || customerV1OrderItemsDraftCountEditRequest === null) {
        throw new Error("Missing the required parameter 'customerV1OrderItemsDraftCountEditRequest' when calling customerV1OrderItemsDraftCountEditPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Customer-UUID': customerUUID,
        'JWT-Token': jWTToken,
        'Order-UUID': orderUUID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/customer/v1/order/items/draft/count/edit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerV1OrderTipSavePost operation.
     * @callback module:api/DefaultApi~customerV1OrderTipSavePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Сохранение чека
     * Сохраняет чек заказа
     * @param {String} customerUUID Уникальный идентификатор пользователя
     * @param {String} jWTToken jwt токен пользователя
     * @param {String} orderUUID Уникальный идентификатор заказа
     * @param {module:api/DefaultApi~customerV1OrderTipSavePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    customerV1OrderTipSavePost(customerUUID, jWTToken, orderUUID, callback) {
      let postBody = null;
      // verify the required parameter 'customerUUID' is set
      if (customerUUID === undefined || customerUUID === null) {
        throw new Error("Missing the required parameter 'customerUUID' when calling customerV1OrderTipSavePost");
      }
      // verify the required parameter 'jWTToken' is set
      if (jWTToken === undefined || jWTToken === null) {
        throw new Error("Missing the required parameter 'jWTToken' when calling customerV1OrderTipSavePost");
      }
      // verify the required parameter 'orderUUID' is set
      if (orderUUID === undefined || orderUUID === null) {
        throw new Error("Missing the required parameter 'orderUUID' when calling customerV1OrderTipSavePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Customer-UUID': customerUUID,
        'JWT-Token': jWTToken,
        'Order-UUID': orderUUID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/customer/v1/order/tip/save', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
