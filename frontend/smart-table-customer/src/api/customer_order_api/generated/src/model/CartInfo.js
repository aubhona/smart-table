/**
 * SmartTable Mobile API
 * API для управления заказами.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CartItemInfo from './CartItemInfo';

/**
 * The CartInfo model module.
 * @module model/CartInfo
 * @version 1.0.0
 */
class CartInfo {
    /**
     * Constructs a new <code>CartInfo</code>.
     * @alias module:model/CartInfo
     * @param items {Array.<module:model/CartItemInfo>} 
     * @param totalPrice {String} 
     */
    constructor(items, totalPrice) { 
        
        CartInfo.initialize(this, items, totalPrice);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, items, totalPrice) { 
        obj['items'] = items;
        obj['total_price'] = totalPrice;
    }

    /**
     * Constructs a <code>CartInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CartInfo} obj Optional instance to populate.
     * @return {module:model/CartInfo} The populated <code>CartInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CartInfo();

            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [CartItemInfo]);
            }
            if (data.hasOwnProperty('total_price')) {
                obj['total_price'] = ApiClient.convertToType(data['total_price'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CartInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CartInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CartInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                CartItemInfo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['total_price'] && !(typeof data['total_price'] === 'string' || data['total_price'] instanceof String)) {
            throw new Error("Expected the field `total_price` to be a primitive type in the JSON string but got " + data['total_price']);
        }

        return true;
    }


}

CartInfo.RequiredProperties = ["items", "total_price"];

/**
 * @member {Array.<module:model/CartItemInfo>} items
 */
CartInfo.prototype['items'] = undefined;

/**
 * @member {String} total_price
 */
CartInfo.prototype['total_price'] = undefined;






export default CartInfo;

