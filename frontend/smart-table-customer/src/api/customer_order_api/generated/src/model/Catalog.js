/**
 * SmartTable Mobile API
 * API для управления заказами.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MenuDishItem from './MenuDishItem';

/**
 * The Catalog model module.
 * @module model/Catalog
 * @version 1.0.0
 */
class Catalog {
    /**
     * Constructs a new <code>Catalog</code>.
     * @alias module:model/Catalog
     * @param goTipScreen {Boolean} 
     * @param roomCode {String} 
     * @param totalPrice {String} 
     * @param categories {Array.<String>} 
     * @param menu {Array.<module:model/MenuDishItem>} 
     */
    constructor(goTipScreen, roomCode, totalPrice, categories, menu) { 
        
        Catalog.initialize(this, goTipScreen, roomCode, totalPrice, categories, menu);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, goTipScreen, roomCode, totalPrice, categories, menu) { 
        obj['go_tip_screen'] = goTipScreen;
        obj['room_code'] = roomCode;
        obj['total_price'] = totalPrice;
        obj['categories'] = categories;
        obj['menu'] = menu;
    }

    /**
     * Constructs a <code>Catalog</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Catalog} obj Optional instance to populate.
     * @return {module:model/Catalog} The populated <code>Catalog</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Catalog();

            if (data.hasOwnProperty('go_tip_screen')) {
                obj['go_tip_screen'] = ApiClient.convertToType(data['go_tip_screen'], 'Boolean');
            }
            if (data.hasOwnProperty('room_code')) {
                obj['room_code'] = ApiClient.convertToType(data['room_code'], 'String');
            }
            if (data.hasOwnProperty('total_price')) {
                obj['total_price'] = ApiClient.convertToType(data['total_price'], 'String');
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], ['String']);
            }
            if (data.hasOwnProperty('menu')) {
                obj['menu'] = ApiClient.convertToType(data['menu'], [MenuDishItem]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Catalog</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Catalog</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Catalog.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['room_code'] && !(typeof data['room_code'] === 'string' || data['room_code'] instanceof String)) {
            throw new Error("Expected the field `room_code` to be a primitive type in the JSON string but got " + data['room_code']);
        }
        // ensure the json data is a string
        if (data['total_price'] && !(typeof data['total_price'] === 'string' || data['total_price'] instanceof String)) {
            throw new Error("Expected the field `total_price` to be a primitive type in the JSON string but got " + data['total_price']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categories'])) {
            throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
        }
        if (data['menu']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['menu'])) {
                throw new Error("Expected the field `menu` to be an array in the JSON data but got " + data['menu']);
            }
            // validate the optional field `menu` (array)
            for (const item of data['menu']) {
                MenuDishItem.validateJSON(item);
            };
        }

        return true;
    }


}

Catalog.RequiredProperties = ["go_tip_screen", "room_code", "total_price", "categories", "menu"];

/**
 * @member {Boolean} go_tip_screen
 */
Catalog.prototype['go_tip_screen'] = undefined;

/**
 * @member {String} room_code
 */
Catalog.prototype['room_code'] = undefined;

/**
 * @member {String} total_price
 */
Catalog.prototype['total_price'] = undefined;

/**
 * @member {Array.<String>} categories
 */
Catalog.prototype['categories'] = undefined;

/**
 * @member {Array.<module:model/MenuDishItem>} menu
 */
Catalog.prototype['menu'] = undefined;






export default Catalog;

